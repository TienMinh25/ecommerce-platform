basePath: /api/v1
definitions:
  api_gateway_dto.ChangePasswordRequest:
    properties:
      new_password:
        maxLength: 32
        minLength: 6
        type: string
      old_password:
        maxLength: 32
        minLength: 6
        type: string
    required:
    - new_password
    - old_password
    type: object
  api_gateway_dto.ChangePasswordResponse:
    type: object
  api_gateway_dto.ChangePasswordResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.ChangePasswordResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.CheckTokenResponse:
    properties:
      avatar_url:
        type: string
      full_name:
        type: string
      roles:
        items:
          $ref: '#/definitions/api_gateway_dto.RoleLoginResponse'
        type: array
    type: object
  api_gateway_dto.CheckTokenResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.CheckTokenResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.CreateAddressTypeByAdminRequest:
    properties:
      address_type:
        type: string
    required:
    - address_type
    type: object
  api_gateway_dto.CreateAddressTypeByAdminResponse:
    type: object
  api_gateway_dto.CreateAddressTypeResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.CreateAddressTypeByAdminResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.CreateModuleRequest:
    properties:
      name:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - name
    type: object
  api_gateway_dto.CreateModuleResponse:
    type: object
  api_gateway_dto.CreateModuleResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.CreateModuleResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.CreatePermissionResponse:
    type: object
  api_gateway_dto.CreatePermissionResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.CreatePermissionResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.CreateRoleRequest:
    properties:
      description:
        type: string
      modules_permissions:
        items:
          $ref: '#/definitions/api_gateway_dto.ModulesPermissionsRequest'
        type: array
      role_name:
        minLength: 3
        type: string
    required:
    - modules_permissions
    - role_name
    type: object
  api_gateway_dto.CreateRoleResponse:
    type: object
  api_gateway_dto.CreateRoleResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.CreateRoleResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.CreateUserByAdminRequest:
    properties:
      avatar_url:
        type: string
      birth_date:
        type: string
      email:
        type: string
      fullname:
        type: string
      password:
        maxLength: 32
        minLength: 6
        type: string
      phone:
        type: string
      roles:
        items:
          type: integer
        type: array
      status:
        allOf:
        - $ref: '#/definitions/api_gateway_models.UserStatus'
        enum:
        - active
        - inactive
        example: active
    required:
    - avatar_url
    - email
    - fullname
    - password
    - roles
    type: object
  api_gateway_dto.CreateUserByAdminResponse:
    type: object
  api_gateway_dto.CreateUserByAdminResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.CreateUserByAdminResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.DeleteAddressTypeByAdminResponse:
    type: object
  api_gateway_dto.DeleteAddressTypeResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.DeleteAddressTypeByAdminResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.DeletePermissionByPermissionIDURIResponse:
    type: object
  api_gateway_dto.DeletePermissionByPermissionIDURIResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.DeletePermissionByPermissionIDURIResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.DeleteRoleResponse:
    type: object
  api_gateway_dto.DeleteRolesResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.DeleteRoleResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.DeleteUserByAdminResponse:
    type: object
  api_gateway_dto.DeleteUserByAdminResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.DeleteUserByAdminResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  api_gateway_dto.ForgotPasswordResponse:
    type: object
  api_gateway_dto.ForgotPasswordResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.ForgotPasswordResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.GetAddressTypeByIdResponse:
    properties:
      address_type:
        type: string
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    type: object
  api_gateway_dto.GetAddressTypeByIdResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.GetAddressTypeByIdResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.GetAddressTypeQueryResponse:
    properties:
      address_type:
        type: string
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    type: object
  api_gateway_dto.GetAuthorizationURLResponse:
    properties:
      authorization_url:
        type: string
    type: object
  api_gateway_dto.GetAuthorizationURLResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.GetAuthorizationURLResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.GetListModuleResponseDocs:
    properties:
      data:
        items:
          $ref: '#/definitions/api_gateway_dto.GetModuleResponse'
        type: array
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.GetModuleResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  api_gateway_dto.GetModuleResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.GetModuleResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.GetPermissionResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  api_gateway_dto.GetPermissionResponseDocs:
    properties:
      data:
        items:
          $ref: '#/definitions/api_gateway_dto.GetPermissionResponse'
        type: array
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.GetRoleResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/api_gateway_models.PermissionDetailType'
        type: array
      updated_at:
        type: string
    type: object
  api_gateway_dto.GetRoleResponseDocs:
    properties:
      data:
        items:
          $ref: '#/definitions/api_gateway_dto.GetRoleResponse'
        type: array
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.GetUserByAdminResponse:
    properties:
      avatar_url:
        type: string
      birth_date:
        type: string
      email:
        type: string
      email_verify:
        type: boolean
      fullname:
        type: string
      id:
        type: integer
      phone:
        type: string
      phone_verify:
        type: boolean
      roles:
        items:
          $ref: '#/definitions/api_gateway_dto.RoleLoginResponse'
        type: array
      status:
        type: string
      updated_at:
        type: string
    type: object
  api_gateway_dto.GetUserByAdminResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.GetUserByAdminResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.ListAddressTypesResponseDocs:
    properties:
      data:
        items:
          $ref: '#/definitions/api_gateway_dto.GetAddressTypeQueryResponse'
        type: array
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 32
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  api_gateway_dto.LoginResponse:
    properties:
      access_token:
        type: string
      avatar_url:
        type: string
      full_name:
        type: string
      refresh_token:
        type: string
      roles:
        items:
          $ref: '#/definitions/api_gateway_dto.RoleLoginResponse'
        type: array
    type: object
  api_gateway_dto.LoginResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.LoginResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.LogoutRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  api_gateway_dto.LogoutResponse:
    type: object
  api_gateway_dto.LogoutResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.LogoutResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.Metadata:
    properties:
      code:
        type: integer
    type: object
  api_gateway_dto.ModulesPermissionsRequest:
    properties:
      module_id:
        minimum: 1
        type: integer
      permissions:
        items:
          type: integer
        type: array
    required:
    - module_id
    - permissions
    type: object
  api_gateway_dto.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  api_gateway_dto.RefreshTokenResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.RefreshTokenResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.RegisterRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        maxLength: 32
        minLength: 6
        type: string
    required:
    - email
    - full_name
    - password
    type: object
  api_gateway_dto.RegisterResponse:
    type: object
  api_gateway_dto.RegisterResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.RegisterResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.ResendVerifyEmailRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  api_gateway_dto.ResendVerifyEmailResponse:
    type: object
  api_gateway_dto.ResendVerifyEmailResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.ResendVerifyEmailResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.ResetPasswordRequest:
    properties:
      email:
        type: string
      otp:
        type: string
      password:
        maxLength: 32
        minLength: 6
        type: string
    required:
    - email
    - otp
    - password
    type: object
  api_gateway_dto.ResetPasswordResponse:
    type: object
  api_gateway_dto.ResetPasswordResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.ResetPasswordResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.ResponseErrorDocs:
    properties:
      error: {}
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.RoleLoginResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  api_gateway_dto.UpdateAddressTypeBodyRequest:
    properties:
      address_type:
        type: string
    required:
    - address_type
    type: object
  api_gateway_dto.UpdateAddressTypeByAdminResponse:
    type: object
  api_gateway_dto.UpdateAddressTypeResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.UpdateAddressTypeByAdminResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.UpdateModuleByModuleIDRequest:
    properties:
      name:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - name
    type: object
  api_gateway_dto.UpdateModuleByModuleIDResponse:
    type: object
  api_gateway_dto.UpdateModuleByModuleIDResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.UpdateModuleByModuleIDResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.UpdatePermissionByIDResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.UpdatePermissionByPermissionIDResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.UpdatePermissionByPermissionIDRequest:
    properties:
      name:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - name
    type: object
  api_gateway_dto.UpdatePermissionByPermissionIDResponse:
    type: object
  api_gateway_dto.UpdateRoleRequest:
    properties:
      description:
        type: string
      modules_permissions:
        items:
          $ref: '#/definitions/api_gateway_dto.ModulesPermissionsRequest'
        type: array
      role_name:
        minLength: 3
        type: string
    required:
    - modules_permissions
    - role_name
    type: object
  api_gateway_dto.UpdateRoleResponse:
    type: object
  api_gateway_dto.UpdateRolesResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.UpdateRoleResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.UpdateUserByAdminRequest:
    properties:
      roles:
        items:
          type: integer
        type: array
      status:
        allOf:
        - $ref: '#/definitions/api_gateway_models.UserStatus'
        enum:
        - active
        - inactive
        example: active
    required:
    - roles
    type: object
  api_gateway_dto.UpdateUserByAdminResponse:
    type: object
  api_gateway_dto.UpdateUserByAdminResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.UpdateUserByAdminResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_dto.VerifyEmailRequest:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  api_gateway_dto.VerifyEmailResponse:
    type: object
  api_gateway_dto.VerifyEmailResponseDocs:
    properties:
      data:
        $ref: '#/definitions/api_gateway_dto.VerifyEmailResponse'
      metadata:
        $ref: '#/definitions/api_gateway_dto.Metadata'
    type: object
  api_gateway_models.PermissionDetailType:
    properties:
      module_id:
        type: integer
      permissions:
        items:
          type: integer
        type: array
    type: object
  api_gateway_models.UserStatus:
    enum:
    - active
    - inactive
    type: string
    x-enum-varnames:
    - UserStatusActive
    - UserStatusInactive
host: server.local:3000
info:
  contact: {}
  description: API for ecommerce
  title: Ecommerce API
  version: "1.0"
paths:
  /address-types:
    get:
      consumes:
      - application/json
      description: Get list address types
      parameters:
      - description: Limit number of records returned
        in: query
        name: limit
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.ListAddressTypesResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Get list address types
      tags:
      - address-types
    post:
      consumes:
      - application/json
      description: create new address type
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.CreateAddressTypeByAdminRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api_gateway_dto.CreateAddressTypeResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Create new address type
      tags:
      - address-types
  /address-types/{addressTypeID}:
    delete:
      consumes:
      - application/json
      description: delete address type by id
      parameters:
      - description: address type id
        in: path
        name: addressTypeID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.DeleteAddressTypeResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Delete address type
      tags:
      - address-types
    get:
      consumes:
      - application/json
      description: Get address type by id
      parameters:
      - description: address type id
        in: path
        name: addressTypeID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.GetAddressTypeByIdResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Get address type by id
      tags:
      - address-types
    patch:
      consumes:
      - application/json
      description: update address type by id
      parameters:
      - description: address type id
        in: path
        name: addressTypeID
        required: true
        type: integer
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.UpdateAddressTypeBodyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.UpdateAddressTypeResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Update address type by address id
      tags:
      - address-types
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: change password
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.ChangePasswordResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: change password
      tags:
      - auth
  /auth/check-token:
    get:
      consumes:
      - application/json
      description: check token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.CheckTokenResponseDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: check token
      tags:
      - auth
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: call to send OTP through mail or mobile phone (if verify)
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.ForgotPasswordResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      summary: forgot password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.LoginResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      summary: Login the system
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: logout account
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.LogoutResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: logout
      tags:
      - auth
  /auth/oauth/url:
    get:
      consumes:
      - application/json
      description: get authorization url
      parameters:
      - description: type of oauth provider
        enum:
        - google
        - facebook
        in: query
        name: oauth_provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.GetAuthorizationURLResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      summary: get authorization url
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: refresh token
      parameters:
      - description: '{refresh_token}'
        in: header
        name: X-Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.RefreshTokenResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      summary: refresh token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: register account
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api_gateway_dto.RegisterResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      summary: Register new account customer
      tags:
      - auth
  /auth/resend-verify-email:
    post:
      consumes:
      - application/json
      description: resend otp to verify email
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.ResendVerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.ResendVerifyEmailResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      summary: resend otp to verify email
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: reset password (used for forgot password)
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.ResetPasswordResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      summary: reset password (used for forgot password)
      tags:
      - auth
  /auth/verify-email:
    post:
      consumes:
      - application/json
      description: verify email
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.VerifyEmailResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      summary: verify email register
      tags:
      - auth
  /modules:
    get:
      consumes:
      - application/json
      description: Get a paginated list of modules
      parameters:
      - description: Page number (required if getAll is false)
        in: query
        name: page
        type: integer
      - description: Page size (required if getAll is false)
        in: query
        name: limit
        type: integer
      - description: Get all modules without pagination
        in: query
        name: getAll
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.GetListModuleResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Get module list
      tags:
      - modules
    post:
      consumes:
      - application/json
      description: Create a new module with a given name
      parameters:
      - description: Module Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.CreateModuleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api_gateway_dto.CreateModuleResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Create a new module
      tags:
      - modules
  /modules/{moduleID}:
    delete:
      consumes:
      - application/json
      description: Delete a module using its ID
      parameters:
      - description: Module ID
        in: path
        name: moduleID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.DeletePermissionByPermissionIDURIResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Delete module by ID
      tags:
      - modules
    get:
      consumes:
      - application/json
      description: Get module details by module ID
      parameters:
      - description: Module ID
        in: path
        name: moduleID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.GetModuleResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Get module by ID
      tags:
      - modules
    patch:
      consumes:
      - application/json
      description: Update the module name using module ID
      parameters:
      - description: Module ID
        in: path
        name: moduleID
        required: true
        type: integer
      - description: Module Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.UpdateModuleByModuleIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.UpdateModuleByModuleIDResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Update module by ID
      tags:
      - modules
  /permissions:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of permissions or all permissions
      parameters:
      - description: Page number (required if getAll is false)
        in: query
        name: page
        type: integer
      - description: Page size (required if getAll is false)
        in: query
        name: limit
        type: integer
      - description: Get all permissions without pagination
        in: query
        name: getAll
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.GetPermissionResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Get a list of permissions
      tags:
      - permissions
    post:
      consumes:
      - application/json
      description: Add a new permission with a given name
      parameters:
      - description: Permission Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.CreateModuleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api_gateway_dto.CreatePermissionResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Create a new permission
      tags:
      - permissions
  /permissions/{permissionID}:
    delete:
      consumes:
      - application/json
      description: Remove a specific permission from the system
      parameters:
      - description: Permission ID
        in: path
        name: permissionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.DeletePermissionByPermissionIDURIResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Delete a permission by ID
      tags:
      - permissions
    get:
      consumes:
      - application/json
      description: Retrieve a specific permission by its ID
      parameters:
      - description: Permission ID
        in: path
        name: permissionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.GetPermissionResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Get a permission by ID
      tags:
      - permissions
    patch:
      consumes:
      - application/json
      description: Modify an existing permission's action
      parameters:
      - description: Permission ID
        in: path
        name: permissionID
        required: true
        type: string
      - description: Updated Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.UpdatePermissionByPermissionIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.UpdatePermissionByIDResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Update a permission by ID
      tags:
      - permissions
  /roles:
    get:
      consumes:
      - application/json
      description: Get list roles pagination with some filter and sorting
      parameters:
      - description: Limit number of records returned
        in: query
        name: limit
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: Provide for search by name
        enum:
        - name
        in: query
        name: searchBy
        type: string
      - description: Value for search
        in: query
        name: searchValue
        type: string
      - description: Sort by some attributes
        enum:
        - name
        in: query
        name: sortBy
        type: string
      - description: Sort order asc or desc
        enum:
        - asc
        - desc
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.GetRoleResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Get list roles pagination with some filter and sorting
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create new role based on modules and permissions
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api_gateway_dto.CreateRoleResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Create new role based on modules and permissions
      tags:
      - roles
  /roles/{roleID}:
    delete:
      consumes:
      - application/json
      description: Delete role by id
      parameters:
      - description: Role id for delete
        in: path
        name: roleID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.DeleteRolesResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Delete role by id
      tags:
      - roles
    patch:
      consumes:
      - application/json
      description: Update permissions on modules for role
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.UpdateRoleRequest'
      - description: Role id to update
        in: path
        name: roleID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.UpdateRolesResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Update permissions on modules for role
      tags:
      - roles
  /users:
    get:
      consumes:
      - application/json
      description: Get list users
      parameters:
      - description: Limit number of records returned
        in: query
        name: limit
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: Provide for search by email, phone or fullname
        enum:
        - email
        - phone
        - fullname
        in: query
        name: searchBy
        type: string
      - description: Value for search
        in: query
        name: searchValue
        type: string
      - description: Sort by some attributes
        enum:
        - fullname
        - email
        - birthdate
        - updated_at
        - phone
        in: query
        name: sortBy
        type: string
      - description: Sort order asc or desc
        enum:
        - asc
        - desc
        in: query
        name: sortOrder
        type: string
      - description: Filter by email verify
        enum:
        - true
        - false
        in: query
        name: emailVerify
        type: boolean
      - description: Filter by phone verify
        enum:
        - true
        - false
        in: query
        name: phoneVerify
        type: boolean
      - description: Filter by status of user
        enum:
        - active
        - inactive
        in: query
        name: status
        type: string
      - description: Start time for last update
        in: query
        name: updatedAtStartFrom
        type: string
      - description: End time for last update
        in: query
        name: updatedAtEndFrom
        type: string
      - description: Filter by role id
        enum:
        - 1
        - 2
        - 3
        - 4
        in: query
        name: roleID
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.GetUserByAdminResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: Get list users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create new user by admin
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.CreateUserByAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.CreateUserByAdminResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: create new user by admin
      tags:
      - users
  /users/{userID}:
    delete:
      consumes:
      - application/json
      description: delete user by admin
      parameters:
      - description: user id on path
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.DeleteUserByAdminResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: delete user by admin
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: update user by admin
      parameters:
      - description: user id on path
        in: path
        name: userID
        required: true
        type: integer
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_gateway_dto.UpdateUserByAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_gateway_dto.UpdateUserByAdminResponseDocs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_gateway_dto.ResponseErrorDocs'
      security:
      - BearerAuth: []
      summary: update user by admin
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
