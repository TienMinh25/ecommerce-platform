import React from 'react';
import {
    Box,
    Text,
    Flex,
    Button,
    Popover,
    PopoverContent,
    PopoverBody,
    PopoverHeader,
    PopoverArrow,
    Image,
    Divider,
    Spinner,
    Center,
    Icon,
} from '@chakra-ui/react';
import { FaHeart } from 'react-icons/fa';
import { format } from 'date-fns';
import { Link as RouterLink, useNavigate } from 'react-router-dom';

const NotificationPopup = ({ notifications = [], isLoading = false, onMarkAllAsRead, onClose }) => {
    const navigate = useNavigate();

    // Format the timestamp
    const formatTime = (timestamp) => {
        const date = new Date(timestamp);
        return format(date, 'HH:mm dd-MM-yyyy');
    };

    // Handle View All button click
    const handleViewAll = () => {
        // Close the popup
        if (onClose) {
            onClose();
        }

        // Navigate to the notifications page
        navigate('/user/account/notifications/see');
    };

    // Render different notification types
    const renderNotificationContent = (notification) => {
        switch (notification.type) {
            case 'order_status':
                return (
                    <Box>
                        <Text fontWeight="medium" mb={1}>
                            B·∫°n c√≥ ƒë∆°n h√†ng ƒëang tr√™n ƒë∆∞·ªùng giao
                        </Text>
                        <Text fontSize="sm" color="gray.600">
                            üöö Shipper b√°o r·∫±ng: ƒë∆°n h√†ng {notification.orderId} c·ªßa b·∫°n v·∫´n ƒëang trong qu√° tr√¨nh v·∫≠n chuy·ªÉn v√† d·ª± ki·∫øn ƒë∆∞·ª£c giao trong 1-2 ng√†y t·ªõi. Vui l√≤ng b·ªè qua th√¥ng b√°o n√†y n·∫øu b·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√†ng nh√©!üòä
                        </Text>
                    </Box>
                );
            case 'voucher':
                return (
                    <Box>
                        <Flex alignItems="center" mb={1}>
                            <Icon as={FaHeart} color="red.500" mr={1} />
                            <Text fontWeight="medium">
                                Voucher d√†nh ri√™ng cho b·∫°n
                            </Text>
                        </Flex>
                        <Text fontSize="sm" color="gray.600">
                            Shopee g·ª≠i b·∫°n Voucher ƒë{notification.amount.toLocaleString()} thay l·ªùi xin l·ªói cho ƒë∆°n ƒë√£ giao sau ng√†y Shopee ƒë·∫£m b·∫£o. L∆∞u Voucher ngay! *L∆∞u √Ω: N·∫øu ƒë∆°n h√†ng b·ªã h·ªßy ho·∫∑c c√≥ ph√°t sinh y√™u c·∫ßu Tr·∫£ h√†ng/Ho√†n ti·ªÅn tr∆∞·ªõc khi giao h√†ng th√†nh c√¥ng, Voucher s·∫Ω kh√¥ng ƒë∆∞·ª£c √°p d·ª•ng
                        </Text>
                    </Box>
                );
            case 'freeship':
                return (
                    <Box>
                        <Text fontWeight="medium" mb={1}>
                            M√£ freeship cho ƒë∆°n t·ª´ 0ƒê c√≥ s·∫µn trong v√≠ üòä
                        </Text>
                        <Text fontSize="sm" color="gray.600">
                            üé´ M√£ s·∫Ω h·∫øt h·∫°n v√†o {notification.expiryDate}! √Åp d·ª•ng cho ƒë∆°n t·ª´ 0ƒêüëë
                        </Text>
                        <Text fontSize="sm" color="gray.600">
                            üè∑Ô∏è Voucher freeship c√≥ s·∫µn trong v√≠, ƒë·ª´ng ngay k·∫ªo l·ª°!
                        </Text>
                    </Box>
                );
            default:
                return (
                    <Text fontSize="sm">
                        {notification.message}
                    </Text>
                );
        }
    };

    return (
        <PopoverContent
            borderColor="gray.200"
            boxShadow="lg"
            borderRadius="md"
            width="420px"
            maxH="600px"
            overflowY="auto"
            _focus={{ outline: "none" }}
        >
            <PopoverArrow />
            <PopoverHeader py={3} px={4} borderBottomWidth="1px">
                <Flex justifyContent="space-between" alignItems="center">
                    <Text fontWeight="bold" fontSize="md">Th√¥ng B√°o M·ªõi Nh·∫≠n</Text>
                    <Button
                        variant="ghost"
                        size="sm"
                        colorScheme="brand"
                        onClick={onMarkAllAsRead}
                        fontSize="sm"
                    >
                        ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc t·∫•t c·∫£
                    </Button>
                </Flex>
            </PopoverHeader>
            <PopoverBody p={0}>
                {isLoading ? (
                    <Center py={8}>
                        <Spinner
                            thickness="4px"
                            speed="0.65s"
                            emptyColor="gray.200"
                            color="brand.500"
                            size="lg"
                        />
                    </Center>
                ) : notifications.length === 0 ? (
                    <Center py={8} px={4} textAlign="center">
                        <Text color="gray.500">B·∫°n ch∆∞a c√≥ th√¥ng b√°o n√†o</Text>
                    </Center>
                ) : (
                    <Box>
                        {notifications.map((notification, index) => (
                            <Flex
                                key={notification.id || index}
                                p={4}
                                borderBottom="1px"
                                borderColor="gray.200"
                                bg={notification.isRead ? "white" : "gray.50"}
                                _hover={{ bg: "gray.100" }}
                                cursor="pointer"
                            >
                                <Image
                                    src={notification.image}
                                    alt="Notification"
                                    boxSize="60px"
                                    objectFit="cover"
                                    borderRadius="md"
                                    mr={3}
                                    fallbackSrc="https://via.placeholder.com/60"
                                />
                                <Box flex="1">
                                    {renderNotificationContent(notification)}
                                    <Text fontSize="xs" color="gray.500" mt={1}>
                                        {formatTime(notification.timestamp)}
                                    </Text>
                                </Box>
                                {notification.hasAction && (
                                    <Button
                                        size="sm"
                                        colorScheme="red"
                                        variant="solid"
                                        height="36px"
                                        mt={2}
                                        fontSize="sm"
                                    >
                                        {notification.actionText || "D√πng ngay!"}
                                    </Button>
                                )}
                            </Flex>
                        ))}

                        <Button
                            variant="ghost"
                            size="md"
                            width="full"
                            py={3}
                            onClick={handleViewAll}
                            borderTopWidth="1px"
                            borderTopColor="gray.200"
                            borderRadius="0"
                            fontWeight="medium"
                        >
                            Xem t·∫•t c·∫£
                        </Button>
                    </Box>
                )}
            </PopoverBody>
        </PopoverContent>
    );
};

export default NotificationPopup;