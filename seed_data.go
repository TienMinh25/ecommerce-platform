package main

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/Masterminds/squirrel"
	"github.com/TienMinh25/ecommerce-platform/internal/common"
	"github.com/TienMinh25/ecommerce-platform/internal/utils"
	"github.com/brianvoe/gofakeit/v7"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	"io"
	"log"
	"math"
	"net/http"
	"os"
	"strings"
	"sync"
	"time"
)

type PermissionDetail struct {
	ModuleID    int   `json:"module_id"`
	Permissions []int `json:"permissions"`
}

type progressUpdate struct {
	goroutineID int
	count       int
}

// C·∫•u tr√∫c cho d·ªØ li·ªáu ƒë·ªãa gi·ªõi h√†nh ch√≠nh
type Province struct {
	ID        int        `json:"code"`
	Name      string     `json:"name"`
	Districts []District `json:"districts"`
}

type District struct {
	ID    int    `json:"code"`
	Name  string `json:"name"`
	Wards []Ward `json:"wards"`
}

type Ward struct {
	ID   int    `json:"code"`
	Name string `json:"name"`
}

// Danh s√°ch c√°c APIs h·ªó tr·ª£ d·ªØ li·ªáu ƒë·ªãa gi·ªõi h√†nh ch√≠nh Vi·ªát Nam
var vietnamGeoAPIs = []string{
	"https://provinces.open-api.vn/api/?depth=3", // API v·ªõi ƒë·∫ßy ƒë·ªß ph∆∞·ªùng/x√£
	"https://vietnam-administrative-divisions.vercel.app/api/",
	"https://vapi.vnappmob.com/api/province/",
}

// M·ªü r·ªông danh s√°ch attribute cho c√°c danh m·ª•c m·ªõi
var categoryAttributes = map[string]map[string][]string{
	"ƒêi·ªán t·ª≠": {
		"M√†u s·∫Øc":    {"ƒêen", "Tr·∫Øng", "Xanh", "X√°m", "B·∫°c", "V√†ng"},
		"Dung l∆∞·ª£ng": {"64GB", "128GB", "256GB", "512GB", "1TB"},
	},
	"Th·ªùi trang": {
		"M√†u s·∫Øc":    {"ƒêen", "Tr·∫Øng", "Xanh", "ƒê·ªè", "N√¢u", "H·ªìng"},
		"K√≠ch th∆∞·ªõc": {"S", "M", "L", "XL", "XXL"},
	},
	"Gia d·ª•ng": {
		"M√†u s·∫Øc":   {"ƒêen", "Tr·∫Øng", "B·∫°c", "X√°m"},
		"C√¥ng su·∫•t": {"500W", "1000W", "1500W", "2000W"},
	},
	"S√°ch": {
		"Lo·∫°i b√¨a": {"B√¨a m·ªÅm", "B√¨a c·ª©ng"},
		"Ng√¥n ng·ªØ": {"Ti·∫øng Vi·ªát", "Ti·∫øng Anh"},
	},
	"Th·ªÉ thao": {
		"M√†u s·∫Øc":    {"ƒêen", "Xanh", "ƒê·ªè", "T√≠m", "H·ªìng"},
		"K√≠ch th∆∞·ªõc": {"Nh·ªè", "V·ª´a", "L·ªõn"},
	},
	"L√†m ƒë·∫πp": {
		"M√†u s·∫Øc":   {"ƒê·ªè", "H·ªìng", "Nude", "Cam"},
		"Dung t√≠ch": {"15ml", "30ml", "50ml", "100ml"},
	},
	"Th·ª±c ph·∫©m": {
		"Tr·ªçng l∆∞·ª£ng": {"340g", "500g", "1kg", "5kg", "10kg"},
		"Xu·∫•t x·ª©":     {"Vi·ªát Nam", "Th√°i Lan", "Nh·∫≠t B·∫£n"},
	},
	"N·ªôi th·∫•t": {
		"M√†u s·∫Øc":    {"Tr·∫Øng", "N√¢u", "ƒêen", "X√°m", "Be"},
		"K√≠ch th∆∞·ªõc": {"Nh·ªè", "V·ª´a", "L·ªõn"},
	},
}

func main() {
	ctx := context.Background()
	gofakeit.Seed(0)

	// Database connection strings
	apiDSN := "postgres://admin:admin@localhost:5432/api_gateway_db?sslmode=disable"
	notifDSN := "postgres://admin:admin@localhost:5432/notifications_db?sslmode=disable"
	orderDSN := "postgres://admin:admin@localhost:5432/orders_db?sslmode=disable"
	partnerDSN := "postgres://admin:admin@localhost:5432/partners_db?sslmode=disable"

	// Connect to all databases
	pools := map[string]*pgxpool.Pool{
		"api_gateway_db":   connectDB(ctx, apiDSN, "api_gateway_db"),
		"notifications_db": connectDB(ctx, notifDSN, "notifications_db"),
		"orders_db":        connectDB(ctx, orderDSN, "orders_db"),
		"partners_db":      connectDB(ctx, partnerDSN, "partners_db"),
	}
	defer func() {
		for _, pool := range pools {
			pool.Close()
		}
	}()

	log.Println("üôÇ‚Äç‚ÜîÔ∏è Connected to all databases")
	log.Println("üèÉ‚Äç‚ôÇÔ∏è Seeding data...")

	// T·∫£i d·ªØ li·ªáu ƒë·ªãa gi·ªõi h√†nh ch√≠nh Vi·ªát Nam (n·∫øu c√≥ th·ªÉ)
	adminDivisions := loadAdministrativeDivisions()

	// Seed independent tables
	seedAPIGatewayIndependentTables(ctx, pools["api_gateway_db"])
	seedOrderIndependentTables(ctx, pools["orders_db"], adminDivisions)
	seedPartnersIndependentTables(ctx, pools["partners_db"])

	// Seed users (10,000) and get their IDs
	userIDs := seedUsers(ctx, pools["api_gateway_db"], 10000, 1000, 100)

	// Seed addresses for all users
	seedAddressesForUsers(ctx, pools["api_gateway_db"], userIDs, adminDivisions)

	// Seed dependent tables
	seedNotificationPreferences(ctx, pools["notifications_db"], userIDs)
	seedCarts(ctx, pools["orders_db"], userIDs)

	// Seed admin address, cart, and notification preferences
	seedAdminDependentData(ctx, pools)

	// Select supplier user IDs and assign supplier role
	supplierUserIDs := selectSupplierUserIDs(userIDs)
	assignSupplierRole(ctx, pools["api_gateway_db"], supplierUserIDs)

	// Select deliverer user IDs and assign deliverer role
	delivererUserIDs := selectDelivererUserIDs(userIDs)
	assignDelivererRole(ctx, pools["api_gateway_db"], delivererUserIDs)

	// Seed supplier profiles and products
	supplierIDs := seedSupplierProfiles(ctx, pools["api_gateway_db"], pools["partners_db"], supplierUserIDs)
	seedEnhancedProducts(ctx, pools["partners_db"], supplierIDs)

	// Seed deliverer profiles
	seedDelivererProfiles(ctx, pools["orders_db"], delivererUserIDs, adminDivisions)

	// Seed additional data
	seedEverything(ctx, pools, userIDs, supplierIDs, adminDivisions)

	fmt.Println("‚úÖ Seed completed successfully")
}
func connectDB(ctx context.Context, dsn, dbName string) *pgxpool.Pool {
	pool, err := pgxpool.New(ctx, dsn)
	if err != nil {
		log.Fatalf("Unable to connect to %s: %v", dbName, err)
	}
	return pool
}

// C·∫£i ti·∫øn ƒë·ªÉ s·ª≠ d·ª•ng file hanh-chinh-viet-nam.json ƒë√£ t·∫£i v·ªÅ
func loadAdministrativeDivisions() []Province {
	// Th·ª≠ ƒë·ªçc t·ª´ file hanh-chinh-viet-nam.json
	if data, err := os.ReadFile("hanh-chinh-viet-nam.json"); err == nil {
		var provinces []Province
		if err := json.Unmarshal(data, &provinces); err == nil {
			log.Println("‚úÖ Loaded administrative divisions data from hanh-chinh-viet-nam.json")
			return provinces
		} else {
			log.Printf("Warning: Failed to parse hanh-chinh-viet-nam.json: %v", err)
		}
	}

	// Th·ª≠ t·∫£i d·ªØ li·ªáu t·ª´ API n·∫øu kh√¥ng c√≥ file ho·∫∑c parse l·ªói
	for _, apiURL := range vietnamGeoAPIs {
		resp, err := http.Get(apiURL)
		if err == nil && resp.StatusCode == 200 {
			defer resp.Body.Close()
			body, err := io.ReadAll(resp.Body)
			if err == nil {
				var provinces []Province
				if err := json.Unmarshal(body, &provinces); err == nil {
					log.Println("‚úÖ Loaded administrative divisions data from API:", apiURL)

					// L∆∞u v√†o file ƒë·ªÉ d√πng sau n√†y
					os.WriteFile("hanh-chinh-viet-nam.json", body, 0644)
					log.Println("‚úÖ Saved administrative divisions data to hanh-chinh-viet-nam.json")

					return provinces
				}
			}
		}
	}

	// Fallback v√†o d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng th·ªÉ t·∫£i
	log.Println("‚ö†Ô∏è Using sample administrative divisions data")
	return nil
}

// API Gateway Seeding
func seedAPIGatewayIndependentTables(ctx context.Context, db *pgxpool.Pool) {
	seedRoles(ctx, db)
	seedModules(ctx, db)
	seedPermissions(ctx, db)
	seedAddressTypes(ctx, db)
	seedRolePermissions(ctx, db)
	seedAdmin(ctx, db)
}

func seedRoles(ctx context.Context, db *pgxpool.Pool) {
	roles := []struct {
		name, desc string
	}{
		{"admin", "Administrator with full access"},
		{"customer", "Regular user with basic access"},
		{"supplier", "User with access to manage products and store"},
		{"deliverer", "User with access to manage delivery statuses"},
	}
	for _, r := range roles {
		_, _ = db.Exec(ctx, `INSERT INTO roles (role_name, description) VALUES ($1, $2) ON CONFLICT DO NOTHING;`, r.name, r.desc)
	}
}

func seedModules(ctx context.Context, db *pgxpool.Pool) {
	modules := []string{
		"User Management", "Role & Permission", "Product Management", "Cart",
		"Order Management", "Payment", "Shipping Management", "Review & Rating",
		"Store Management", "Onboarding", "Address Type Management", "Module Management",
		"Coupon Management",
	}
	for _, m := range modules {
		_, _ = db.Exec(ctx, `INSERT INTO modules (name) VALUES ($1) ON CONFLICT DO NOTHING;`, m)
	}
}

func seedPermissions(ctx context.Context, db *pgxpool.Pool) {
	perms := []string{"create", "update", "delete", "read", "approve", "reject"}
	for _, p := range perms {
		_, _ = db.Exec(ctx, `INSERT INTO permissions (name) VALUES ($1) ON CONFLICT DO NOTHING;`, p)
	}
}

func seedAddressTypes(ctx context.Context, db *pgxpool.Pool) {
	types := []string{"Home", "Office", "Warehouse", "Storefront", "Other"}
	for _, t := range types {
		_, _ = db.Exec(ctx, `INSERT INTO address_types (address_type) VALUES ($1) ON CONFLICT DO NOTHING;`, t)
	}
}

func seedRolePermissions(ctx context.Context, db *pgxpool.Pool) {
	roles := make(map[string]int64)
	rows, err := db.Query(ctx, `SELECT id, role_name FROM roles`)
	if err != nil {
		log.Fatal("get roles:", err)
	}
	defer rows.Close()
	for rows.Next() {
		var id int64
		var name string
		if err := rows.Scan(&id, &name); err != nil {
			log.Fatal("scan role:", err)
		}
		roles[name] = id
	}

	rolePermissions := map[string][]PermissionDetail{
		"admin": {
			{ModuleID: 1, Permissions: []int{1, 2, 3, 4, 5, 6}},
			{ModuleID: 2, Permissions: []int{1, 2, 3, 4, 5, 6}},
			{ModuleID: 3, Permissions: []int{1, 2, 3, 4, 5, 6}},
			{ModuleID: 4, Permissions: []int{1, 2, 3, 4, 5, 6}},
			{ModuleID: 5, Permissions: []int{1, 2, 3, 4, 5, 6}},
			{ModuleID: 6, Permissions: []int{1, 2, 3, 4, 5, 6}},
			{ModuleID: 7, Permissions: []int{1, 2, 3, 4, 5, 6}},
			{ModuleID: 8, Permissions: []int{1, 2, 3, 4, 5, 6}},
			{ModuleID: 9, Permissions: []int{1, 2, 3, 4, 5, 6}},
			{ModuleID: 10, Permissions: []int{1, 2, 3, 4, 5, 6}},
			{ModuleID: 11, Permissions: []int{1, 2, 3, 4, 5, 6}},
			{ModuleID: 12, Permissions: []int{1, 2, 3, 4, 5, 6}},
			{ModuleID: 13, Permissions: []int{1, 2, 3, 4, 5, 6}},
		},
		"customer": {
			{ModuleID: 1, Permissions: []int{1, 2, 3, 4}},
			{ModuleID: 4, Permissions: []int{1, 2, 3, 4}},
			{ModuleID: 5, Permissions: []int{1, 4}},
			{ModuleID: 6, Permissions: []int{1, 4, 3}},
			{ModuleID: 7, Permissions: []int{4}},
			{ModuleID: 8, Permissions: []int{1, 4, 3}},
			{ModuleID: 11, Permissions: []int{4}},
			{ModuleID: 13, Permissions: []int{4}},
		},
		"supplier": {
			{ModuleID: 3, Permissions: []int{1, 2, 3, 4}},
			{ModuleID: 9, Permissions: []int{1, 2, 3, 4}},
			{ModuleID: 5, Permissions: []int{2, 4}},
		},
		"deliverer": {
			{ModuleID: 5, Permissions: []int{2, 4}},
			{ModuleID: 7, Permissions: []int{2, 4}},
		},
	}

	for roleName, permissions := range rolePermissions {
		roleID, exists := roles[roleName]
		if !exists {
			log.Fatalf("Role not found: %s", roleName)
		}
		bytes, _ := json.Marshal(permissions)
		_, err := db.Exec(ctx, `
			INSERT INTO role_permissions (role_id, permission_detail) 
			VALUES ($1, $2) 
			ON CONFLICT (role_id) DO UPDATE 
			SET permission_detail = $2, updated_at = CURRENT_TIMESTAMP;
		`, roleID, bytes)
		if err != nil {
			log.Fatalf("Insert role permissions for %s: %v", roleName, err)
		}
	}
}

func seedAdmin(ctx context.Context, db *pgxpool.Pool) {
	var userID int64
	err := db.QueryRow(ctx, `
		INSERT INTO users (fullname, email, avatar_url, email_verified, status, phone_verified, phone, birthdate) 
		VALUES ('Admin User', 'admin@admin.com', 'https://ui-avatars.com/api/?name=Admin+User', TRUE, 'active', TRUE, '+84987654321', '1990-01-01') 
		ON CONFLICT (email) DO UPDATE 
		SET fullname = 'Admin User', 
		    avatar_url = 'https://ui-avatars.com/api/?name=Admin+User',
		    phone = '+84987654321',
		    birthdate = '1990-01-01',
		    updated_at = CURRENT_TIMESTAMP 
		RETURNING id;
	`).Scan(&userID)
	if err != nil {
		log.Fatal("insert admin user:", err)
	}

	hash, _ := utils.HashPassword("admin123")
	_, err = db.Exec(ctx, `
		INSERT INTO user_password (id, password) 
		VALUES ($1, $2) 
		ON CONFLICT (id) DO UPDATE 
		SET password = $2;
	`, userID, hash)
	if err != nil {
		log.Fatal("insert admin password:", err)
	}

	var roleID int64
	err = db.QueryRow(ctx, `SELECT id FROM roles WHERE role_name='admin'`).Scan(&roleID)
	if err != nil {
		log.Fatal("get admin role:", err)
	}

	_, err = db.Exec(ctx, `
		INSERT INTO users_roles (user_id, role_id) 
		VALUES ($1, $2) 
		ON CONFLICT (role_id, user_id) DO NOTHING;
	`, userID, roleID)
	if err != nil {
		log.Fatal("assign admin role:", err)
	}
}

// C·∫≠p nh·∫≠t seedAdminDependentData ƒë·ªÉ s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ file JSON
func seedAdminDependentData(ctx context.Context, pools map[string]*pgxpool.Pool) {
	var adminID int64
	var homeAddressTypeID int64

	// L·∫•y ID c·ªßa admin
	err := pools["api_gateway_db"].QueryRow(ctx, `SELECT id FROM users WHERE email = 'admin@admin.com'`).Scan(&adminID)
	if err != nil {
		log.Fatal("get admin ID:", err)
	}

	// L·∫•y address_type_id cho Home
	err = pools["api_gateway_db"].QueryRow(ctx, `SELECT id FROM address_types WHERE address_type = 'Home'`).Scan(&homeAddressTypeID)
	if err != nil {
		log.Fatal("get home address type:", err)
	}

	// ƒê·ªçc d·ªØ li·ªáu t·ª´ file hanh-chinh-viet-nam.json ƒë·ªÉ l·∫•y th√¥ng tin H√† N·ªôi
	var provinces []Province
	data, err := os.ReadFile("hanh-chinh-viet-nam.json")

	// M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng d·ªØ li·ªáu c·ª©ng n·∫øu kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file
	provinceName := "H√† N·ªôi"
	districtName := "Hai B√† Tr∆∞ng"
	wardName := "Ph∆∞·ªùng B√°ch Khoa"

	if err == nil {
		// Parse JSON data
		if err := json.Unmarshal(data, &provinces); err == nil {
			// T√¨m H√† N·ªôi trong danh s√°ch t·ªânh/th√†nh ph·ªë
			for _, province := range provinces {
				if province.Name == "H√† N·ªôi" || province.Name == "Th√†nh ph·ªë H√† N·ªôi" {
					provinceName = province.Name

					// T√¨m qu·∫≠n Hai B√† Tr∆∞ng
					for _, district := range province.Districts {
						if district.Name == "Qu·∫≠n Hai B√† Tr∆∞ng" {
							districtName = district.Name

							// T√¨m ph∆∞·ªùng B√°ch Khoa
							for _, ward := range district.Wards {
								if strings.Contains(ward.Name, "B√°ch Khoa") {
									wardName = ward.Name
									break
								}
							}
							break
						}
					}
					break
				}
			}
		}
	}

	// Insert Address cho admin v·ªõi th√™m c·ªôt ward
	_, err = pools["api_gateway_db"].Exec(ctx, `
        INSERT INTO addresses (
            user_id, recipient_name, phone, street, district, province, postal_code, 
            country, is_default, address_type_id, ward
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
        ON CONFLICT DO NOTHING;
    `, adminID, "Admin User", "+84987654321", "S·ªë 1 ƒê·∫°i C·ªì Vi·ªát", districtName,
		provinceName, "100000", "Vi·ªát Nam", true, homeAddressTypeID, wardName)

	if err != nil {
		log.Printf("Warning: Insert address for admin: %v", err)
	}

	// Insert Cart cho admin
	_, err = pools["orders_db"].Exec(ctx, `
        INSERT INTO carts (user_id)
        VALUES ($1)
        ON CONFLICT DO NOTHING;
    `, adminID)

	if err != nil {
		log.Printf("Warning: Insert cart for admin: %v", err)
	}

	// Insert Notification Preferences cho admin - kh√¥ng c√≥ survey
	prefs := map[string]bool{
		"order_status":   true,
		"payment_status": true,
		"product_status": true,
		"promotion":      true,
	}
	prefsJSON, _ := json.Marshal(prefs)

	_, err = pools["notifications_db"].Exec(ctx, `
        INSERT INTO notification_preferences (user_id, email_preferences, in_app_preferences)
        VALUES ($1, $2, $2)
        ON CONFLICT (user_id) DO UPDATE
        SET email_preferences = $2, in_app_preferences = $2;
    `, adminID, prefsJSON)

	if err != nil {
		log.Printf("Warning: Insert notification preferences for admin: %v", err)
	}

	log.Println("‚úÖ Admin dependent data seeded successfully")
}

func seedUsers(ctx context.Context, db *pgxpool.Pool, total, batchSize, numGoroutines int) []int64 {
	// S·ª¨A: Th√™m ki·ªÉm tra ƒë·∫ßu v√†o
	if total <= 0 || batchSize <= 0 || numGoroutines <= 0 {
		log.Fatal("total, batchSize, and numGoroutines must be > 0")
	}

	var sequenceMutex sync.Mutex
	var emailSequence int64 = 0

	type userInput struct {
		fullname     string
		email        string
		avatar       string
		phone        string
		birthdate    time.Time
		passwordHash string
	}

	var customerRoleID int
	if err := db.QueryRow(ctx, `SELECT id FROM roles WHERE role_name = $1`, common.RoleCustomer).Scan(&customerRoleID); err != nil {
		log.Fatal("get customer role_id:", err)
	}

	perGoroutine := total / numGoroutines
	remainder := total % numGoroutines

	progressChan := make(chan progressUpdate, numGoroutines)
	var wg sync.WaitGroup
	wg.Add(numGoroutines)

	var allUserIDs []int64
	var userIDsMutex sync.Mutex

	fmt.Println("üöÄ Starting seed with", numGoroutines, "goroutines")

	for i := 0; i < numGoroutines; i++ {
		workload := perGoroutine
		if i < remainder {
			workload++
		}

		go func(goroutineID int, workload int) {
			defer wg.Done()
			seeded := 0
			var localUserIDs []int64

			for seeded < workload {
				toSeed := batchSize
				if workload-seeded < batchSize {
					toSeed = workload - seeded
				}

				var users []userInput
				for len(users) < toSeed {
					name := gofakeit.Name()
					sequenceMutex.Lock()
					seq := emailSequence
					emailSequence++
					sequenceMutex.Unlock()

					username := strings.ToLower(strings.Replace(name, " ", ".", -1))
					email := fmt.Sprintf("%s.%d@example.com", username, seq)
					avatar := fmt.Sprintf("https://ui-avatars.com/api/?name=%s", strings.ReplaceAll(name, " ", "+"))
					birth := gofakeit.DateRange(
						time.Date(1980, 1, 1, 0, 0, 0, 0, time.UTC),
						time.Date(2005, 1, 1, 0, 0, 0, 0, time.UTC),
					)
					hash, _ := utils.HashPassword("123456")

					phone := fmt.Sprintf("+84%d", gofakeit.Number(300000000, 999999999))
					users = append(users, userInput{
						fullname:     name,
						email:        email,
						avatar:       avatar,
						phone:        phone,
						birthdate:    birth,
						passwordHash: hash,
					})
				}

				var args []interface{}
				query := `INSERT INTO users (fullname, email, avatar_url, phone, birthdate, email_verified, phone_verified, status) VALUES `
				valueStrings := make([]string, len(users))
				for i, u := range users {
					idx := i * 8
					valueStrings[i] = fmt.Sprintf("($%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d)", idx+1, idx+2, idx+3, idx+4, idx+5, idx+6, idx+7, idx+8)
					args = append(args, u.fullname, u.email, u.avatar, u.phone, u.birthdate, true, true, "active")
				}
				query += strings.Join(valueStrings, ",") + " RETURNING id;"

				// S·ª¨A: Th√™m x·ª≠ l√Ω l·ªói m·ªÅm h∆°n
				rows, err := db.Query(ctx, query, args...)
				if err != nil {
					log.Printf("Goroutine #%d: insert users: %v", goroutineID, err)
					continue
				}

				for rows.Next() {
					var id int64
					if err := rows.Scan(&id); err != nil {
						log.Printf("Goroutine #%d: scan user id: %v", goroutineID, err)
						continue
					}
					localUserIDs = append(localUserIDs, id)
				}
				rows.Close()

				var pwArgs []interface{}
				pwValues := make([]string, len(users))
				for i, id := range localUserIDs[len(localUserIDs)-len(users):] {
					idx := i * 2
					pwValues[i] = fmt.Sprintf("($%d, $%d)", idx+1, idx+2)
					pwArgs = append(pwArgs, id, users[i].passwordHash)
				}
				pwQuery := `INSERT INTO user_password (id, password) VALUES ` + strings.Join(pwValues, ",") + ";"
				if _, err := db.Exec(ctx, pwQuery, pwArgs...); err != nil {
					log.Printf("Goroutine #%d: insert user_password: %v", goroutineID, err)
					continue
				}

				var roleArgs []interface{}
				roleValues := make([]string, len(users))
				for i, id := range localUserIDs[len(localUserIDs)-len(users):] {
					idx := i * 2
					roleValues[i] = fmt.Sprintf("($%d, $%d)", idx+1, idx+2)
					roleArgs = append(roleArgs, id, customerRoleID)
				}
				roleQuery := `INSERT INTO users_roles (user_id, role_id) VALUES ` + strings.Join(roleValues, ",") + ";"
				if _, err := db.Exec(ctx, roleQuery, roleArgs...); err != nil {
					log.Printf("Goroutine #%d: insert users_roles: %v", goroutineID, err)
					continue
				}

				seeded += toSeed
				progressChan <- progressUpdate{goroutineID: goroutineID, count: seeded}
			}

			userIDsMutex.Lock()
			allUserIDs = append(allUserIDs, localUserIDs...)
			userIDsMutex.Unlock()
		}(i, workload)
	}

	go func() {
		progress := make([]int, numGoroutines)
		totalInserted := 0
		for update := range progressChan {
			progress[update.goroutineID] = update.count
			totalInserted = 0
			for _, count := range progress {
				totalInserted += count
			}
			fmt.Printf("‚è≥ Progress: Goroutine #%d inserted %d records. Total: %d/%d (%.2f%%)\n",
				update.goroutineID, update.count, totalInserted, total, float64(totalInserted)*100/float64(total))
		}
	}()

	wg.Wait()
	close(progressChan)
	time.Sleep(100 * time.Millisecond)

	fmt.Println("üéâ Done seeding users with concurrent goroutines.")
	return allUserIDs
}

// S·ª≠a l·∫°i h√†m selectSupplierUserIDs ƒë·ªÉ ƒë·∫£m b·∫£o admin c≈©ng l√† supplier
func selectSupplierUserIDs(userIDs []int64) []int64 {
	count := 15 // C·ªë ƒë·ªãnh 15 supplier thay v√¨ len(userIDs) / 10
	supplierUserIDs := make([]int64, 0, count+1)

	// ƒê·∫£m b·∫£o admin c≈©ng l√† supplier (ID=1)
	var adminID int64 = 1 // Th√¥ng th∆∞·ªùng admin l√† ID ƒë·∫ßu ti√™n
	supplierUserIDs = append(supplierUserIDs, adminID)

	// Tr·ªôn ng·∫´u nhi√™n ƒë·ªÉ ch·ªçn users l√†m supplier
	gofakeit.ShuffleAnySlice(userIDs)
	addedCount := 0
	for i := 0; i < len(userIDs) && addedCount < count; i++ {
		if userIDs[i] != adminID {
			supplierUserIDs = append(supplierUserIDs, userIDs[i])
			addedCount++
		}
	}
	return supplierUserIDs
}

func assignSupplierRole(ctx context.Context, db *pgxpool.Pool, supplierUserIDs []int64) {
	var supplierRoleID int64
	err := db.QueryRow(ctx, `SELECT id FROM roles WHERE role_name = $1`, "supplier").Scan(&supplierRoleID)
	if err != nil {
		log.Fatal("get supplier role_id:", err)
	}

	batchSize := 1000
	for i := 0; i < len(supplierUserIDs); i += batchSize {
		end := i + batchSize
		if end > len(supplierUserIDs) {
			end = len(supplierUserIDs)
		}
		batch := supplierUserIDs[i:end]

		var args []interface{}
		query := `INSERT INTO users_roles (user_id, role_id) VALUES `
		valueStrings := make([]string, len(batch))
		for j, userID := range batch {
			idx := j * 2
			valueStrings[j] = fmt.Sprintf("($%d, $%d)", idx+1, idx+2)
			args = append(args, userID, supplierRoleID)
		}
		query += strings.Join(valueStrings, ",") + " ON CONFLICT DO NOTHING;"
		_, err := db.Exec(ctx, query, args...)
		if err != nil {
			log.Fatal("assign supplier role:", err)
		}
	}
}

// T∆∞∆°ng t·ª± v·ªõi deliverer, c≈©ng th√™m admin
func selectDelivererUserIDs(userIDs []int64) []int64 {
	count := 15 // C·ªë ƒë·ªãnh 15 deliverer thay v√¨ len(userIDs) / 20
	delivererUserIDs := make([]int64, 0, count+1)

	// Th√™m admin v√†o danh s√°ch deliverer
	var adminID int64 = 1
	delivererUserIDs = append(delivererUserIDs, adminID)

	// Tr·ªôn ng·∫´u nhi√™n ƒë·ªÉ ch·ªçn users l√†m deliverer
	gofakeit.ShuffleAnySlice(userIDs)
	addedCount := 0
	for i := 0; i < len(userIDs) && addedCount < count; i++ {
		if userIDs[i] != adminID {
			delivererUserIDs = append(delivererUserIDs, userIDs[i])
			addedCount++
		}
	}
	return delivererUserIDs
}

func assignDelivererRole(ctx context.Context, db *pgxpool.Pool, delivererUserIDs []int64) {
	var delivererRoleID int64
	err := db.QueryRow(ctx, `SELECT id FROM roles WHERE role_name = $1`, "deliverer").Scan(&delivererRoleID)
	if err != nil {
		log.Fatal("get deliverer role_id:", err)
	}

	batchSize := 1000
	for i := 0; i < len(delivererUserIDs); i += batchSize {
		end := i + batchSize
		if end > len(delivererUserIDs) {
			end = len(delivererUserIDs)
		}
		batch := delivererUserIDs[i:end]

		var args []interface{}
		query := `INSERT INTO users_roles (user_id, role_id) VALUES `
		valueStrings := make([]string, len(batch))
		for j, userID := range batch {
			idx := j * 2
			valueStrings[j] = fmt.Sprintf("($%d, $%d)", idx+1, idx+2)
			args = append(args, userID, delivererRoleID)
		}
		query += strings.Join(valueStrings, ",") + " ON CONFLICT DO NOTHING;"
		_, err := db.Exec(ctx, query, args...)
		if err != nil {
			log.Fatal("assign deliverer role:", err)
		}
	}
}

// C·∫£i ti·∫øn seedAddressesForUsers ƒë·ªÉ s·ª≠ d·ª•ng d·ªØ li·ªáu ƒë·ªãa gi·ªõi h√†nh ch√≠nh t·ª´ file JSON v√† x·ª≠ l√Ω m·∫£ng r·ªóng
func seedAddressesForUsers(ctx context.Context, db *pgxpool.Pool, userIDs []int64, adminDivisions []Province) {
	var homeAddressTypeID int64
	err := db.QueryRow(ctx, `SELECT id FROM address_types WHERE address_type = $1`, "Home").Scan(&homeAddressTypeID)
	if err != nil {
		log.Fatal("get home address type:", err)
	}

	// ƒê·ªçc d·ªØ li·ªáu t·ª´ file hanh-chinh-viet-nam.json
	var provinces []Province
	data, err := os.ReadFile("hanh-chinh-viet-nam.json")
	if err != nil {
		log.Printf("Error reading hanh-chinh-viet-nam.json: %v", err)
		// Fallback to adminDivisions if file reading fails
		provinces = adminDivisions
	} else {
		// Parse JSON data
		if err := json.Unmarshal(data, &provinces); err != nil {
			log.Printf("Error parsing hanh-chinh-viet-nam.json: %v", err)
			// Fallback to adminDivisions if JSON parsing fails
			provinces = adminDivisions
		}
	}

	if len(provinces) == 0 {
		log.Println("‚ö†Ô∏è No administrative divisions data available, cannot seed addresses properly")
		return
	}

	log.Printf("‚úÖ Loaded %d provinces from hanh-chinh-viet-nam.json for address seeding", len(provinces))

	// L·ªçc ra c√°c t·ªânh c√≥ √≠t nh·∫•t m·ªôt qu·∫≠n/huy·ªán, v√† qu·∫≠n/huy·ªán c√≥ √≠t nh·∫•t m·ªôt ph∆∞·ªùng/x√£
	var validProvinces []Province
	for _, province := range provinces {
		if len(province.Districts) == 0 {
			continue
		}

		var validDistricts []District
		for _, district := range province.Districts {
			if len(district.Wards) == 0 {
				continue
			}
			validDistricts = append(validDistricts, district)
		}

		if len(validDistricts) > 0 {
			province.Districts = validDistricts
			validProvinces = append(validProvinces, province)
		}
	}

	if len(validProvinces) == 0 {
		log.Println("‚ö†Ô∏è No valid administrative divisions data available, cannot seed addresses properly")
		return
	}

	log.Printf("‚úÖ Found %d valid provinces with districts and wards", len(validProvinces))

	// Seed addresses in batches
	batchSize := 1000
	for i := 0; i < len(userIDs); i += batchSize {
		end := i + batchSize
		if end > len(userIDs) {
			end = len(userIDs)
		}
		batch := userIDs[i:end]

		var args []interface{}
		query := `INSERT INTO addresses (user_id, recipient_name, phone, street, district, province, postal_code, country, is_default, address_type_id, ward) VALUES `
		valueStrings := make([]string, 0, len(batch))
		valsCount := 0

		for _, userID := range batch {
			// L·∫•y ng·∫´u nhi√™n m·ªôt t·ªânh/th√†nh ph·ªë
			provinceIdx := gofakeit.Number(0, len(validProvinces)-1)
			province := validProvinces[provinceIdx]

			// L·∫•y ng·∫´u nhi√™n m·ªôt qu·∫≠n/huy·ªán t·ª´ t·ªânh/th√†nh ph·ªë ƒë√≥
			districtIdx := gofakeit.Number(0, len(province.Districts)-1)
			district := province.Districts[districtIdx]

			// L·∫•y ng·∫´u nhi√™n m·ªôt ph∆∞·ªùng/x√£ t·ª´ qu·∫≠n/huy·ªán ƒë√≥
			wardIdx := gofakeit.Number(0, len(district.Wards)-1)
			ward := district.Wards[wardIdx]

			recipientName := gofakeit.Name()
			phone := fmt.Sprintf("+84%d", gofakeit.Number(300000000, 999999999))
			street := fmt.Sprintf("S·ªë %d ƒê∆∞·ªùng %s", gofakeit.Number(1, 999), gofakeit.Street())
			postalCode := fmt.Sprintf("%06d", gofakeit.Number(100000, 999999))
			country := "Vi·ªát Nam"
			isDefault := true

			idx := valsCount * 11 // 11 parameters including ward
			valueStrings = append(valueStrings, fmt.Sprintf("($%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d, $%d)",
				idx+1, idx+2, idx+3, idx+4, idx+5, idx+6, idx+7, idx+8, idx+9, idx+10, idx+11))

			args = append(args, userID, recipientName, phone, street, district.Name, province.Name, postalCode, country, isDefault, homeAddressTypeID, ward.Name)
			valsCount++
		}

		// B·ªè qua n·∫øu kh√¥ng c√≥ ƒë·ªãa ch·ªâ h·ª£p l·ªá ƒë·ªÉ ch√®n
		if len(valueStrings) == 0 {
			continue
		}

		query += strings.Join(valueStrings, ",") + " ON CONFLICT DO NOTHING;"
		_, err := db.Exec(ctx, query, args...)
		if err != nil {
			log.Printf("Error inserting addresses: %v", err)
		}
	}

	log.Println("‚úÖ Successfully seeded addresses for users using Vietnam administrative divisions")
}

func seedAreasFromAdminDivisions(ctx context.Context, db *pgxpool.Pool, adminDivisions []Province) {
	if len(adminDivisions) == 0 {
		log.Println("‚ö†Ô∏è No administrative divisions data")
		return
	}

	log.Printf("üè† Starting to seed areas from %d provinces...", len(adminDivisions))

	// Kh·ªüi t·∫°o squirrel query builder
	psql := squirrel.StatementBuilder.PlaceholderFormat(squirrel.Dollar)

	// T·∫°o bulk insert query
	insertQuery := psql.Insert("areas").
		Columns("city", "country", "district", "ward", "area_code")

	totalAreas := 0

	// Duy·ªát qua t·∫•t c·∫£ v√† add v√†o query
	for _, province := range adminDivisions {
		for _, district := range province.Districts {
			for _, ward := range district.Wards {
				areaCode := fmt.Sprintf("area-code-%v-%v-%v", province.ID, district.ID, ward.ID)

				insertQuery = insertQuery.Values(
					province.Name, // city
					"Vi·ªát Nam",    // country
					district.Name, // district
					ward.Name,     // ward
					areaCode,      // area_code
				)
				totalAreas++
			}
		}
	}

	// Add ON CONFLICT DO NOTHING
	insertQuery = insertQuery.Suffix("ON CONFLICT (area_code) DO NOTHING")

	// Build query
	sql, args, err := insertQuery.ToSql()
	if err != nil {
		log.Printf("‚ùå Error building query: %v", err)
		return
	}

	log.Printf("üìù Executing bulk insert for %d areas...", totalAreas)

	// Execute query
	result, err := db.Exec(ctx, sql, args...)
	if err != nil {
		log.Printf("‚ùå Error executing bulk insert: %v", err)
		return
	}

	rowsAffected := result.RowsAffected()
	log.Printf("‚úÖ Areas seeded successfully: %d areas inserted", rowsAffected)
}

// C·∫≠p nh·∫≠t h√†m seedOrderIndependentTables
func seedOrderIndependentTables(ctx context.Context, db *pgxpool.Pool, adminDivisions []Province) {
	log.Println("üèóÔ∏è Seeding Order service independent tables...")

	// Seed T·∫§T C·∫¢ areas t·ª´ d·ªØ li·ªáu h√†nh ch√≠nh
	seedAreasFromAdminDivisions(ctx, db, adminDivisions)

	// Seed payment methods
	seedPaymentMethods(ctx, db)

	log.Println("‚úÖ Order service independent tables seeded successfully")
}

func seedPaymentMethods(ctx context.Context, db *pgxpool.Pool) {
	methods := []struct {
		name, code string
	}{
		{"Thanh to√°n khi nh·∫≠n h√†ng (COD)", "cod"},
		{"Thanh to√°n qua MoMo", "momo"},
	}

	for _, method := range methods {
		_, err := db.Exec(ctx, `
			INSERT INTO payment_methods (name, code, is_active)
			VALUES ($1, $2, TRUE)
			ON CONFLICT (code) DO UPDATE
			SET name = $1, is_active = TRUE;
		`, method.name, method.code)

		if err != nil {
			log.Fatalf("Error inserting payment method: %v", err)
		}
	}
	log.Println("‚úÖ Payment methods seeded successfully")
}

func seedNotificationPreferences(ctx context.Context, db *pgxpool.Pool, userIDs []int64) {
	batchSize := 1000
	for i := 0; i < len(userIDs); i += batchSize {
		end := i + batchSize
		if end > len(userIDs) {
			end = len(userIDs)
		}
		batch := userIDs[i:end]

		// T·∫°o d·ªØ li·ªáu notification preferences
		var args []interface{}
		query := `INSERT INTO notification_preferences (user_id, email_preferences, in_app_preferences) VALUES `
		valueStrings := make([]string, len(batch))

		for j, userID := range batch {
			idx := j * 3

			// Random preferences
			emailPrefs := map[string]bool{
				"survey":         gofakeit.Bool(),
				"promotion":      gofakeit.Bool(),
				"order_status":   true, // Lu√¥n b·∫≠t th√¥ng b√°o ƒë∆°n h√†ng
				"payment_status": true, // Lu√¥n b·∫≠t th√¥ng b√°o thanh to√°n
				"product_status": gofakeit.Bool(),
			}
			emailPrefsJSON, _ := json.Marshal(emailPrefs)

			// In-app th∆∞·ªùng c≈©ng gi·ªëng email preferences
			inAppPrefs := make(map[string]bool)
			for k, v := range emailPrefs {
				inAppPrefs[k] = v
				// ƒê√¥i khi in-app ƒë∆∞·ª£c b·∫≠t nh∆∞ng email th√¨ kh√¥ng
				if !v && gofakeit.Bool() {
					inAppPrefs[k] = true
				}
			}
			inAppPrefsJSON, _ := json.Marshal(inAppPrefs)

			valueStrings[j] = fmt.Sprintf("($%d, $%d, $%d)", idx+1, idx+2, idx+3)
			args = append(args, userID, emailPrefsJSON, inAppPrefsJSON)
		}

		query += strings.Join(valueStrings, ",") + " ON CONFLICT (user_id) DO NOTHING;"
		_, err := db.Exec(ctx, query, args...)
		if err != nil {
			log.Printf("Error inserting notification preferences: %v", err)
		}
	}
	log.Println("‚úÖ Notification preferences seeded successfully")
}

func seedCarts(ctx context.Context, db *pgxpool.Pool, userIDs []int64) {
	batchSize := 1000
	for i := 0; i < len(userIDs); i += batchSize {
		end := i + batchSize
		if end > len(userIDs) {
			end = len(userIDs)
		}
		batch := userIDs[i:end]

		// Process each user individually to avoid ON CONFLICT issues
		for _, userID := range batch {
			// First check if the user already has a cart
			var count int
			err := db.QueryRow(ctx, `
                SELECT COUNT(*) FROM carts WHERE user_id = $1
            `, userID).Scan(&count)

			if err != nil {
				log.Printf("Error checking cart existence: %v", err)
				continue
			}

			// Only insert if the user doesn't have a cart
			if count == 0 {
				_, err := db.Exec(ctx, `
                    INSERT INTO carts (user_id) VALUES ($1)
                `, userID)

				if err != nil {
					log.Printf("Error inserting cart for user %d: %v", userID, err)
				}
			}
		}
	}
	log.Println("‚úÖ Carts seeded successfully")
}

// Partners Service Seeding
func seedPartnersIndependentTables(ctx context.Context, db *pgxpool.Pool) {
	seedCategories(ctx, db)
	seedTags(ctx, db)
	seedAttributeDefinitions(ctx, db)
}

// C·∫≠p nh·∫≠t h√†m seedCategories ƒë·ªÉ th√™m nhi·ªÅu danh m·ª•c cha v√† con h∆°n
func seedCategories(ctx context.Context, db *pgxpool.Pool) {
	// Ch·ªâ t·∫°o 8 categories ch√≠nh, b·ªè h·∫øt category con
	mainCategories := []struct{ name, desc, imageUrl string }{
		{
			"ƒêi·ªán t·ª≠",
			"ƒêi·ªán tho·∫°i, laptop, m√°y t√≠nh b·∫£ng v√† thi·∫øt b·ªã ƒëi·ªán t·ª≠",
			"https://images.unsplash.com/photo-1498049794561-7780e7231661?w=600&h=400&fit=crop",
		},
		{
			"Th·ªùi trang",
			"Qu·∫ßn √°o, gi√†y d√©p v√† ph·ª• ki·ªán th·ªùi trang",
			"https://images.unsplash.com/photo-1445205170230-053b83016050?w=600&h=400&fit=crop",
		},
		{
			"Gia d·ª•ng",
			"ƒê·ªì gia d·ª•ng v√† v·∫≠t d·ª•ng sinh ho·∫°t h√†ng ng√†y",
			"https://images.unsplash.com/photo-1484101403633-562f891dc89a?w=600&h=400&fit=crop",
		},
		{
			"S√°ch",
			"S√°ch v√† vƒÉn ph√≤ng ph·∫©m",
			"https://images.unsplash.com/photo-1495446815901-a7297e633e8d?w=600&h=400&fit=crop",
		},
		{
			"Th·ªÉ thao",
			"D·ª•ng c·ª• th·ªÉ thao v√† ƒë·ªì d√πng t·∫≠p luy·ªán",
			"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=600&h=400&fit=crop",
		},
		{
			"L√†m ƒë·∫πp",
			"M·ªπ ph·∫©m v√† s·∫£n ph·∫©m chƒÉm s√≥c c√° nh√¢n",
			"https://images.unsplash.com/photo-1522335789203-aabd1fc54bc9?w=600&h=400&fit=crop",
		},
		{
			"Th·ª±c ph·∫©m",
			"Th·ª±c ph·∫©m v√† ƒë·ªì u·ªëng",
			"https://images.unsplash.com/photo-1542838132-92c53300491e?w=600&h=400&fit=crop",
		},
		{
			"N·ªôi th·∫•t",
			"ƒê·ªì n·ªôi th·∫•t v√† trang tr√≠ nh√† c·ª≠a",
			"https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=600&h=400&fit=crop",
		},
	}

	for _, cat := range mainCategories {
		// First check if the category already exists
		var count int
		err := db.QueryRow(ctx, `
			SELECT COUNT(*) FROM categories WHERE name = $1
		`, cat.name).Scan(&count)

		if err != nil {
			log.Printf("Error checking category existence: %v", err)
			continue
		}

		if count == 0 {
			// Insert new category
			_, err := db.Exec(ctx, `
				INSERT INTO categories (name, description, image_url, is_active)
				VALUES ($1, $2, $3, TRUE)
			`, cat.name, cat.desc, cat.imageUrl)

			if err != nil {
				log.Printf("Error inserting category: %v", err)
			}
		} else {
			// Update existing category
			_, err := db.Exec(ctx, `
				UPDATE categories 
				SET description = $2, image_url = $3, is_active = TRUE, updated_at = CURRENT_TIMESTAMP
				WHERE name = $1
			`, cat.name, cat.desc, cat.imageUrl)

			if err != nil {
				log.Printf("Error updating category: %v", err)
			}
		}
	}
	log.Println("‚úÖ Categories seeded successfully")
}

// Danh s√°ch s·∫£n ph·∫©m c·ª• th·ªÉ v·ªõi ·∫£nh ƒë√£ test v√† ho·∫°t ƒë·ªông
var specificProducts = []struct {
	name          string
	description   string
	category      string
	imageURL      string
	variantImages map[string]string
}{
	// ƒêI·ªÜN T·ª¨
	{
		name:        "iPhone 15 Pro Max 256GB",
		description: "ƒêi·ªán tho·∫°i th√¥ng minh cao c·∫•p v·ªõi chip A17 Pro, camera 48MP v√† m√†n h√¨nh Super Retina XDR 6.7 inch",
		category:    "ƒêi·ªán t·ª≠",
		imageURL:    "https://cdn.tgdd.vn/Products/Images/42/299033/iphone-15-pro-max-blue-thumbnew-600x600.jpg",
		variantImages: map[string]string{
			"Xanh":  "https://cdn.tgdd.vn/Products/Images/42/299033/iphone-15-pro-max-blue-thumbnew-600x600.jpg",
			"ƒêen":   "https://cdn.tgdd.vn/Products/Images/42/299033/iphone-15-pro-max-black-thumbnew-600x600.jpg",
			"Tr·∫Øng": "https://cdn.tgdd.vn/Products/Images/42/299033/iphone-15-pro-max-white-thumbnew-600x600.jpg",
		},
	},
	{
		name:        "Samsung Galaxy S24 Ultra",
		description: "Flagship Android v·ªõi b√∫t S Pen, camera 200MP v√† m√†n h√¨nh Dynamic AMOLED 2X",
		category:    "ƒêi·ªán t·ª≠",
		imageURL:    "https://images.fpt.shop/unsafe/filters:quality(90)/fptshop.com.vn/Uploads/images/2015/Tin-Tuc/QuanLNH2/samsung-galaxy-s24-ultra-1.jpg",
		variantImages: map[string]string{
			"X√°m": "https://images.fpt.shop/unsafe/filters:quality(90)/fptshop.com.vn/Uploads/images/2015/Tin-Tuc/QuanLNH2/samsung-galaxy-s24-ultra-1.jpg",
			"ƒêen": "https://images.fpt.shop/unsafe/filters:quality(90)/fptshop.com.vn/Uploads/images/2015/Tin-Tuc/QuanLNH2/samsung-galaxy-s24-ultra-2.jpg",
		},
	},
	{
		name:        "MacBook Air M3 13 inch",
		description: "Laptop si√™u m·ªèng v·ªõi chip Apple M3 v√† th·ªùi l∆∞·ª£ng pin 18 gi·ªù",
		category:    "ƒêi·ªán t·ª≠",
		imageURL:    "https://cdn.tgdd.vn/Products/Images/44/322096/macbook-air-13-inch-m3-2024-starlight-thumb-600x600.jpg",
		variantImages: map[string]string{
			"V√†ng": "https://cdn.tgdd.vn/Products/Images/44/322096/macbook-air-13-inch-m3-2024-starlight-thumb-600x600.jpg",
			"B·∫°c":  "https://cdn.tgdd.vn/Products/Images/44/322096/macbook-air-13-inch-m3-2024-silver-thumb-600x600.jpg",
			"X√°m":  "https://cdn.tgdd.vn/Products/Images/44/322096/macbook-air-13-inch-m3-2024-space-gray-thumb-600x600.jpg",
		},
	},
	{
		name:        "iPad Pro M4 11 inch",
		description: "M√°y t√≠nh b·∫£ng cao c·∫•p v·ªõi chip M4 v√† m√†n h√¨nh Liquid Retina XDR",
		category:    "ƒêi·ªán t·ª≠",
		imageURL:    "https://store.storeimages.cdn-apple.com/1/as-images.apple.com/is/ipad-pro-11-select-wifi-spacegray-202405?wid=470&hei=556&fmt=png-alpha&.v=1713308272877",
		variantImages: map[string]string{
			"X√°m": "https://store.storeimages.cdn-apple.com/1/as-images.apple.com/is/ipad-pro-11-select-wifi-spacegray-202405?wid=470&hei=556&fmt=png-alpha&.v=1713308272877",
			"B·∫°c": "https://store.storeimages.cdn-apple.com/1/as-images.apple.com/is/ipad-pro-11-select-wifi-silver-202405?wid=470&hei=556&fmt=png-alpha&.v=1713308272877",
		},
	},
	{
		name:        "AirPods Pro Gen 2",
		description: "Tai nghe true wireless v·ªõi ch·ªëng ·ªìn ch·ªß ƒë·ªông v√† chip H2",
		category:    "ƒêi·ªán t·ª≠",
		imageURL:    "https://store.storeimages.cdn-apple.com/1/as-images.apple.com/is/MQD83?wid=572&hei=572&fmt=jpeg&qlt=95&.v=1660803972361",
	},

	// TH·ªúI TRANG
	{
		name:        "√Åo thun nam Uniqlo c·ªï tr√≤n",
		description: "√Åo thun nam ch·∫•t li·ªáu cotton 100% m·ªÅm m·∫°i v√† tho√°ng m√°t",
		category:    "Th·ªùi trang",
		imageURL:    "https://image.uniqlo.com/UQ/ST3/vn/imagesgoods/422992/item/vngoods_09_422992.jpg",
		variantImages: map[string]string{
			"ƒêen":   "https://image.uniqlo.com/UQ/ST3/vn/imagesgoods/422992/item/vngoods_09_422992.jpg",
			"Tr·∫Øng": "https://image.uniqlo.com/UQ/ST3/vn/imagesgoods/422992/item/vngoods_01_422992.jpg",
			"Xanh":  "https://image.uniqlo.com/UQ/ST3/vn/imagesgoods/422992/item/vngoods_65_422992.jpg",
		},
	},
	{
		name:        "Gi√†y th·ªÉ thao Nike Air Force 1",
		description: "Gi√†y th·ªÉ thao kinh ƒëi·ªÉn v·ªõi ƒë·∫ø Air cushion v√† da th·∫≠t cao c·∫•p",
		category:    "Th·ªùi trang",
		imageURL:    "https://static.nike.com/a/images/c_limit,w_592,f_auto/t_product_v1/4f37fca8-6bce-43e7-ad07-f57ae3c13142/air-force-1-07-shoes-WrLlWX.png",
		variantImages: map[string]string{
			"Tr·∫Øng": "https://static.nike.com/a/images/c_limit,w_592,f_auto/t_product_v1/4f37fca8-6bce-43e7-ad07-f57ae3c13142/air-force-1-07-shoes-WrLlWX.png",
			"ƒêen":   "https://static.nike.com/a/images/c_limit,w_592,f_auto/t_product_v1/00375837-849f-4f17-ba24-d201d27be36b/air-force-1-07-shoes-0XGfD7.png",
		},
	},
	{
		name:        "T√∫i x√°ch tay n·ªØ Coach",
		description: "T√∫i x√°ch tay n·ªØ cao c·∫•p da th·∫≠t 100% thi·∫øt k·∫ø sang tr·ªçng",
		category:    "Th·ªùi trang",
		imageURL:    "https://vietnam.coach.com/dw/image/v2/BFCR_PRD/on/demandware.static/-/Sites-coach-master-catalog/default/dw5c5e5e5e/images/large/C0772_B4NQ4_d0.jpg",
		variantImages: map[string]string{
			"N√¢u": "https://vietnam.coach.com/dw/image/v2/BFCR_PRD/on/demandware.static/-/Sites-coach-master-catalog/default/dw5c5e5e5e/images/large/C0772_B4NQ4_d0.jpg",
			"ƒêen": "https://vietnam.coach.com/dw/image/v2/BFCR_PRD/on/demandware.static/-/Sites-coach-master-catalog/default/dw5c5e5e5e/images/large/C0772_B4BK_d0.jpg",
		},
	},

	// GIA D·ª§NG
	{
		name:        "N·ªìi c∆°m ƒëi·ªán Panasonic 1.8L",
		description: "N·ªìi c∆°m ƒëi·ªán th√¥ng minh v·ªõi c√¥ng ngh·ªá IH v√† l√≤ng n·ªìi ch·ªëng d√≠nh",
		category:    "Gia d·ª•ng",
		imageURL:    "https://panasonic.com.vn/wp-content/uploads/2020/09/SR-KS181WRA_1-600x600.jpg",
		variantImages: map[string]string{
			"Tr·∫Øng": "https://panasonic.com.vn/wp-content/uploads/2020/09/SR-KS181WRA_1-600x600.jpg",
		},
	},
	{
		name:        "M√°y l·ªçc kh√¥ng kh√≠ Xiaomi Mi Air Purifier 4",
		description: "M√°y l·ªçc kh√¥ng kh√≠ th√¥ng minh v·ªõi b·ªô l·ªçc HEPA H13",
		category:    "Gia d·ª•ng",
		imageURL:    "https://cdn.tgdd.vn/Products/Images/1348/280714/may-loc-khong-khi-xiaomi-mi-air-purifier-4-thumb-600x600.jpg",
	},
	{
		name:        "N·ªìi chi√™n kh√¥ng d·∫ßu Philips 4.1L",
		description: "N·ªìi chi√™n kh√¥ng d·∫ßu c√¥ng ngh·ªá Rapid Air v·ªõi dung t√≠ch 4.1L",
		category:    "Gia d·ª•ng",
		imageURL:    "https://cdn.tgdd.vn/Products/Images/1982/78874/noi-chien-khong-dau-philips-hd9200-90-4-1-lit-thumb-600x600.jpg",
		variantImages: map[string]string{
			"ƒêen":   "https://cdn.tgdd.vn/Products/Images/1982/78874/noi-chien-khong-dau-philips-hd9200-90-4-1-lit-thumb-600x600.jpg",
			"Tr·∫Øng": "https://cdn.tgdd.vn/Products/Images/1982/78875/noi-chien-khong-dau-philips-hd9252-90-4-1-lit-thumb-600x600.jpg",
		},
	},

	// S√ÅCH
	{
		name:        "ƒê·∫Øc Nh√¢n T√¢m - Dale Carnegie",
		description: "Cu·ªën s√°ch kinh ƒëi·ªÉn v·ªÅ ngh·ªá thu·∫≠t giao ti·∫øp v√† ·ª©ng x·ª≠",
		category:    "S√°ch",
		imageURL:    "https://salt.tikicdn.com/cache/750x750/ts/product/5e/18/24/2a6154ba08df6ce6161c13f4303fa19e.jpg.webp",
	},
	{
		name:        "Nh√† Gi·∫£ Kim - Paulo Coelho",
		description: "Ti·ªÉu thuy·∫øt n·ªïi ti·∫øng th·∫ø gi·ªõi v·ªÅ h√†nh tr√¨nh t√¨m ki·∫øm √Ω nghƒ©a cu·ªôc s·ªëng",
		category:    "S√°ch",
		imageURL:    "https://salt.tikicdn.com/cache/750x750/ts/product/45/3b/fc/aa81d0592c4d5be8ad83ad1555164abc.jpg.webp",
	},
	{
		name:        "Sapiens - Yuval Noah Harari",
		description: "L∆∞·ª£c s·ª≠ lo√†i ng∆∞·ªùi - cu·ªën s√°ch v·ªÅ l·ªãch s·ª≠ v√† t∆∞∆°ng lai nh√¢n lo·∫°i",
		category:    "S√°ch",
		imageURL:    "https://salt.tikicdn.com/cache/750x750/ts/product/e0/65/24/8cf7d2f6a50b5fb60c53da09bc2db7a4.jpg.webp",
	},

	// TH·ªÇ THAO
	{
		name:        "T·∫° tay ƒëi·ªÅu ch·ªânh 20kg",
		description: "T·∫° tay th√¥ng minh c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh t·ª´ 2-20kg ti·∫øt ki·ªám kh√¥ng gian",
		category:    "Th·ªÉ thao",
		imageURL:    "https://cdn.tgdd.vn/Products/Images/4221/236951/ta-tay-dieu-chinh-bowflex-selecttech-552-tu-2-24kg-thumb-600x600.jpg",
	},
	{
		name:        "Th·∫£m t·∫≠p yoga ch·ªëng tr∆∞·ª£t 6mm",
		description: "Th·∫£m t·∫≠p yoga cao c·∫•p d√†y 6mm ch·ªëng tr∆∞·ª£t v√† th√¢n thi·ªán m√¥i tr∆∞·ªùng",
		category:    "Th·ªÉ thao",
		imageURL:    "https://cdn.tgdd.vn/Products/Images/4221/235951/tham-tap-yoga-6mm-xanh-la-thumb-600x600.jpg",
		variantImages: map[string]string{
			"Xanh": "https://cdn.tgdd.vn/Products/Images/4221/235951/tham-tap-yoga-6mm-xanh-la-thumb-600x600.jpg",
			"T√≠m":  "https://cdn.tgdd.vn/Products/Images/4221/235952/tham-tap-yoga-6mm-tim-thumb-600x600.jpg",
			"H·ªìng": "https://cdn.tgdd.vn/Products/Images/4221/235953/tham-tap-yoga-6mm-hong-thumb-600x600.jpg",
		},
	},
	{
		name:        "B√≥ng ƒë√° FIFA Quality Pro",
		description: "B√≥ng ƒë√° chu·∫©n FIFA Quality Pro cho thi ƒë·∫•u chuy√™n nghi·ªáp",
		category:    "Th·ªÉ thao",
		imageURL:    "https://cdn.tgdd.vn/Products/Images/4221/236845/bong-da-fifa-quality-pro-size-5-thumb-600x600.jpg",
	},

	// L√ÄM ƒê·∫∏P
	{
		name:        "Son m√¥i YSL Rouge Pur Couture",
		description: "Son m√¥i cao c·∫•p v·ªõi c√¥ng th·ª©c d∆∞·ª°ng ·∫©m v√† m√†u s·∫Øc l√¢u tr√¥i",
		category:    "L√†m ƒë·∫πp",
		imageURL:    "https://www.yslbeauty.com.vn/dw/image/v2/AANG_PRD/on/demandware.static/-/Sites-ysl-master-catalog/default/dwc5c5c5c5/images/LIPS/ROUGE_PUR_COUTURE/3365440787984_rouge_pur_couture_1_rouge_rock.jpg",
		variantImages: map[string]string{
			"ƒê·ªè":   "https://www.yslbeauty.com.vn/dw/image/v2/AANG_PRD/on/demandware.static/-/Sites-ysl-master-catalog/default/dwc5c5c5c5/images/LIPS/ROUGE_PUR_COUTURE/3365440787984_rouge_pur_couture_1_rouge_rock.jpg",
			"H·ªìng": "https://www.yslbeauty.com.vn/dw/image/v2/AANG_PRD/on/demandware.static/-/Sites-ysl-master-catalog/default/dwc5c5c5c5/images/LIPS/ROUGE_PUR_COUTURE/3365440787984_rouge_pur_couture_52_rosy_coral.jpg",
		},
	},
	{
		name:        "Kem ch·ªëng n·∫Øng La Roche-Posay SPF 60",
		description: "Kem ch·ªëng n·∫Øng d√†nh cho da nh·∫°y c·∫£m SPF 60 PA++++",
		category:    "L√†m ƒë·∫πp",
		imageURL:    "https://www.laroche-posay.vn/-/media/project/loreal/brand-sites/lrp/apac/vn/products/anthelios/anthelios-airlicium-ultra-light-spf60/3337875546298.jpg",
		variantImages: map[string]string{
			"50ml":  "https://www.laroche-posay.vn/-/media/project/loreal/brand-sites/lrp/apac/vn/products/anthelios/anthelios-airlicium-ultra-light-spf60/3337875546298.jpg",
			"100ml": "https://www.laroche-posay.vn/-/media/project/loreal/brand-sites/lrp/apac/vn/products/anthelios/anthelios-airlicium-ultra-light-spf60-100ml/3337875546299.jpg",
		},
	},

	// TH·ª∞C PH·∫®M
	{
		name:        "G·∫°o ST25 ƒê·ªìng Th√°p",
		description: "G·∫°o th∆°m ST25 ch·∫•t l∆∞·ª£ng cao t·ª´ ƒê·ªìng Th√°p h·∫°t d·∫ªo m·ªÅm th∆°m ngon",
		category:    "Th·ª±c ph·∫©m",
		imageURL:    "https://cdn.tgdd.vn/Products/Images/2513/238242/gao-st25-dong-thap-tui-5kg-202103091133085068.jpg",
		variantImages: map[string]string{
			"5kg":  "https://cdn.tgdd.vn/Products/Images/2513/238242/gao-st25-dong-thap-tui-5kg-202103091133085068.jpg",
			"10kg": "https://cdn.tgdd.vn/Products/Images/2513/238243/gao-st25-dong-thap-tui-10kg-202103091133085068.jpg",
		},
	},
	{
		name:        "C√† ph√™ Trung Nguy√™n Legend 5",
		description: "C√† ph√™ pha phin truy·ªÅn th·ªëng pha ch·∫ø t·ª´ 100% c√† ph√™ Robusta v√† Arabica",
		category:    "Th·ª±c ph·∫©m",
		imageURL:    "https://www.trungnguyenlegend.com/wp-content/uploads/2018/08/ca-phe-trung-nguyen-legend-5-500g.jpg",
		variantImages: map[string]string{
			"500g": "https://www.trungnguyenlegend.com/wp-content/uploads/2018/08/ca-phe-trung-nguyen-legend-5-500g.jpg",
			"340g": "https://www.trungnguyenlegend.com/wp-content/uploads/2018/08/ca-phe-trung-nguyen-legend-5-340g.jpg",
		},
	},

	// N·ªòI TH·∫§T
	{
		name:        "Sofa 3 ch·ªó IKEA Ektorp",
		description: "Sofa 3 ch·ªó ng·ªìi b·ªçc v·∫£i khung g·ªó th√¥ng thi·∫øt k·∫ø Scandinavian",
		category:    "N·ªôi th·∫•t",
		imageURL:    "https://www.ikea.com/vn/en/images/products/ektorp-3-seat-sofa-vittaryd-white__0818598_pe774498_s5.jpg",
		variantImages: map[string]string{
			"Tr·∫Øng": "https://www.ikea.com/vn/en/images/products/ektorp-3-seat-sofa-vittaryd-white__0818598_pe774498_s5.jpg",
			"X√°m":   "https://www.ikea.com/vn/en/images/products/ektorp-3-seat-sofa-vittaryd-grey__0818599_pe774499_s5.jpg",
		},
	},
	{
		name:        "B√†n l√†m vi·ªác IKEA Hemnes",
		description: "B√†n l√†m vi·ªác g·ªó th√¥ng t·ª± nhi√™n v·ªõi 2 ngƒÉn k√©o thi·∫øt k·∫ø c·ªï ƒëi·ªÉn",
		category:    "N·ªôi th·∫•t",
		imageURL:    "https://www.ikea.com/vn/en/images/products/hemnes-desk-white-stain__0318434_pe513726_s5.jpg",
		variantImages: map[string]string{
			"Tr·∫Øng": "https://www.ikea.com/vn/en/images/products/hemnes-desk-white-stain__0318434_pe513726_s5.jpg",
			"N√¢u":   "https://www.ikea.com/vn/en/images/products/hemnes-desk-brown__0318435_pe513727_s5.jpg",
		},
	},
}

func seedTags(ctx context.Context, db *pgxpool.Pool) {
	tags := []string{
		"M·ªõi nh·∫•t", "B√°n ch·∫°y", "Gi·∫£m gi√°", "Cao c·∫•p", "Gi√° r·∫ª",
		"Ch√≠nh h√£ng", "Ch·∫•t l∆∞·ª£ng cao", "H√†ng hi·ªáu", "Th∆∞∆°ng hi·ªáu", "Nh·∫≠p kh·∫©u",
		"Xu h∆∞·ªõng", "Th·ªãnh h√†nh", "∆Øu ƒë√£i", "Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn", "Khuy·∫øn m√£i",
		"Ph√¢n ph·ªëi ch√≠nh th·ª©c", "H√†ng ƒë·ªôc quy·ªÅn", "Phi√™n b·∫£n gi·ªõi h·∫°n",
		"B·ªô s·∫£n ph·∫©m", "Combo", // Th√™m hai tag m·ªõi cho s·∫£n ph·∫©m cha
	}

	for _, tag := range tags {
		// Ki·ªÉm tra xem tag ƒë√£ t·ªìn t·∫°i ch∆∞a
		var count int
		err := db.QueryRow(ctx, `
			SELECT COUNT(*) FROM tags WHERE name = $1
		`, tag).Scan(&count)

		if err != nil {
			log.Printf("Error checking tag existence: %v", err)
			continue
		}

		if count == 0 {
			_, err := db.Exec(ctx, `
				INSERT INTO tags (name)
				VALUES ($1);
			`, tag)

			if err != nil {
				log.Printf("Error inserting tag: %v", err)
			}
		}
	}
	log.Println("‚úÖ Tags seeded successfully")
}

func getAttributeOptions(attrName string) ([]string, bool) {
	// T·ªïng h·ª£p t·∫•t c·∫£ c√°c gi√° tr·ªã c√≥ th·ªÉ c√≥ cho m·ªói attribute t·ª´ c√°c danh m·ª•c
	allOptions := make(map[string]map[string]bool)

	for _, categoryAttrs := range categoryAttributes {
		for attr, options := range categoryAttrs {
			if _, exists := allOptions[attr]; !exists {
				allOptions[attr] = make(map[string]bool)
			}

			for _, option := range options {
				allOptions[attr][option] = true
			}
		}
	}

	// Chuy·ªÉn ƒë·ªïi map th√†nh slice
	if optionMap, exists := allOptions[attrName]; exists {
		uniqueOptions := make([]string, 0, len(optionMap))
		for option := range optionMap {
			uniqueOptions = append(uniqueOptions, option)
		}
		return uniqueOptions, true
	}

	return nil, false
}

func seedSupplierProfiles(ctx context.Context, apiDb, partnerDb *pgxpool.Pool, supplierUserIDs []int64) []int64 {
	// L·∫•y danh s√°ch ƒë·ªãa ch·ªâ c·ªßa supplier ƒë·ªÉ d√πng l√†m ƒë·ªãa ch·ªâ doanh nghi·ªáp
	supplierAddresses := make(map[int64]int64)
	for _, userID := range supplierUserIDs {
		var addressID int64
		err := apiDb.QueryRow(ctx, `
			SELECT id FROM addresses WHERE user_id = $1 LIMIT 1
		`, userID).Scan(&addressID)

		if err != nil {
			log.Printf("Warning: No address found for user_id: %d", userID)
			continue
		}

		supplierAddresses[userID] = addressID
	}

	// T·∫°o supplier profiles
	supplierIDs := make([]int64, 0, len(supplierUserIDs))

	for _, userID := range supplierUserIDs {
		addressID, ok := supplierAddresses[userID]
		if !ok {
			continue
		}

		// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë·ªÉ t·∫°o t√™n c√¥ng ty
		var fullname string
		err := apiDb.QueryRow(ctx, `SELECT fullname FROM users WHERE id = $1`, userID).Scan(&fullname)
		if err != nil {
			log.Printf("Warning: Cannot get fullname for user_id: %d", userID)
			continue
		}

		// T·∫°o t√™n c√¥ng ty t·ª´ t√™n ng∆∞·ªùi d√πng
		companyName := fmt.Sprintf("%s Shop", fullname)

		// L·∫•y th√¥ng tin s·ªë ƒëi·ªán tho·∫°i t·ª´ addresses
		var phone string
		err = apiDb.QueryRow(ctx, `SELECT phone FROM addresses WHERE id = $1`, addressID).Scan(&phone)
		if err != nil {
			log.Printf("Warning: Cannot get phone from address: %d", addressID)
			phone = fmt.Sprintf("+84%d", gofakeit.Number(300000000, 999999999))
		}

		// T·∫°o m√£ s·ªë thu·∫ø ng·∫´u nhi√™n
		taxID := fmt.Sprintf("%d-%d", gofakeit.Number(1000000000, 9999999999), gofakeit.Number(100, 999))

		// T·∫°o logo t·ª´ t√™n c√¥ng ty
		logoURL := fmt.Sprintf("https://ui-avatars.com/api/?name=%s&background=random", strings.ReplaceAll(companyName, " ", "+"))

		// T·∫°o m√¥ t·∫£ c√¥ng ty
		descriptions := []string{
			"Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn nh·ªØng s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao v·ªõi gi√° c·∫£ c·∫°nh tranh.",
			"ƒê∆∞·ª£c th√†nh l·∫≠p t·ª´ nƒÉm 2018, ch√∫ng t√¥i ƒë√£ ph·ª•c v·ª• h√†ng ng√†n kh√°ch h√†ng tr√™n to√†n qu·ªëc.",
			"Chuy√™n cung c·∫•p c√°c s·∫£n ph·∫©m ch√≠nh h√£ng, m·ªõi 100% v√† b·∫£o h√†nh theo ti√™u chu·∫©n nh√† s·∫£n xu·∫•t.",
			"ƒê·ªëi t√°c ch√≠nh th·ª©c c·ªßa nhi·ªÅu th∆∞∆°ng hi·ªáu l·ªõn, ch√∫ng t√¥i t·ª± h√†o v·ªÅ ch·∫•t l∆∞·ª£ng d·ªãch v·ª• v√† s·ª± h√†i l√≤ng c·ªßa kh√°ch h√†ng.",
			"V·ªõi ƒë·ªôi ng≈© nh√¢n vi√™n t·∫≠n t√¢m, ch√∫ng t√¥i cam k·∫øt mang l·∫°i tr·∫£i nghi·ªám mua s·∫Øm t·ªët nh·∫•t cho kh√°ch h√†ng.",
		}
		description := descriptions[gofakeit.Number(0, len(descriptions)-1)]

		var supplierID int64
		err = partnerDb.QueryRow(ctx, `
			INSERT INTO supplier_profiles (user_id, company_name, contact_phone, description, logo_url, business_address_id, tax_id, status)
			VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
			ON CONFLICT (tax_id) DO UPDATE
			SET company_name = $2, contact_phone = $3, description = $4, logo_url = $5, business_address_id = $6, status = $8
			RETURNING id;
		`, userID, companyName, phone, description, logoURL, addressID, taxID, "active").Scan(&supplierID)

		if err != nil {
			log.Printf("Error inserting supplier profile: %v", err)
			continue
		}

		supplierIDs = append(supplierIDs, supplierID)

		// T·∫°o supplier document v·ªõi JSON documents
		documentsJSON := map[string]string{
			"id_card_front":    "https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=880&q=80",
			"id_card_back":     "https://images.unsplash.com/photo-1560250097-0b93528c311a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1171&q=80",
			"business_license": "https://images.unsplash.com/photo-1554224155-6726b3ff858f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80",
			"tax_certificate":  "https://images.unsplash.com/photo-1600880292203-757bb62b4baf?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80",
		}

		documentsBytes, err := json.Marshal(documentsJSON)
		if err != nil {
			log.Printf("Error marshaling documents JSON: %v", err)
			continue
		}

		_, err = partnerDb.Exec(ctx, `
			INSERT INTO supplier_documents (supplier_id, documents, verification_status, admin_note)
			VALUES ($1, $2, 'approved', 'ƒê√£ x√°c th·ª±c h·ªì s∆° nh√† cung c·∫•p - T√†i li·ªáu ƒë·∫ßy ƒë·ªß v√† h·ª£p l·ªá')
			ON CONFLICT DO NOTHING;
		`, supplierID, documentsBytes)

		if err != nil {
			log.Printf("Error inserting supplier document: %v", err)
		}
	}

	log.Printf("‚úÖ Created %d supplier profiles", len(supplierIDs))
	return supplierIDs
}

// C·∫£i ti·∫øn seedEnhancedProducts ƒë·ªÉ ƒë·∫£m b·∫£o seedTags ƒë∆∞·ª£c g·ªçi tr∆∞·ªõc khi th√™m s·∫£n ph·∫©m
func seedEnhancedProducts(ctx context.Context, db *pgxpool.Pool, supplierIDs []int64) {
	seedTags(ctx, db)
	seedAttributeDefinitions(ctx, db)

	// Check if product_variants table exists
	var exists bool
	err := db.QueryRow(ctx, `
		SELECT EXISTS (
			SELECT FROM information_schema.tables 
			WHERE table_schema = 'public' 
			AND table_name = 'product_variants'
		)
	`).Scan(&exists)

	if err != nil {
		log.Printf("Error checking if product_variants table exists: %v", err)
		return
	}

	// Danh s√°ch s·∫£n ph·∫©m c·ª• th·ªÉ v·ªõi ·∫£nh ch√≠nh x√°c
	// THAY TH·∫æ PH·∫¶N specificProducts TRONG H√ÄM seedEnhancedProducts B·∫∞NG CODE N√ÄY
	specificProducts := []struct {
		name          string
		description   string
		category      string
		imageURL      string
		variantImages map[string]string
	}{
		// ƒêI·ªÜN T·ª¨
		{
			name:        "iPhone 15 Pro Max 256GB",
			description: "ƒêi·ªán tho·∫°i th√¥ng minh cao c·∫•p v·ªõi chip A17 Pro, camera 48MP v√† m√†n h√¨nh Super Retina XDR 6.7 inch",
			category:    "ƒêi·ªán t·ª≠",
			imageURL:    "https://store.storeimages.cdn-apple.com/1/as-images.apple.com/is/iphone-15-pro-max-bluetitanium-select?wid=470&hei=556&fmt=png-alpha&.v=1692895204112",
			variantImages: map[string]string{
				"Xanh":  "https://store.storeimages.cdn-apple.com/1/as-images.apple.com/is/iphone-15-pro-max-bluetitanium-select?wid=470&hei=556&fmt=png-alpha&.v=1692895204112",
				"ƒêen":   "https://store.storeimages.cdn-apple.com/1/as-images.apple.com/is/iphone-15-pro-max-blacktitanium-select?wid=470&hei=556&fmt=png-alpha&.v=1692895204112",
				"Tr·∫Øng": "https://store.storeimages.cdn-apple.com/1/as-images.apple.com/is/iphone-15-pro-max-whitetitanium-select?wid=470&hei=556&fmt=png-alpha&.v=1692895204112",
			},
		},
		{
			name:        "Samsung Galaxy S24 Ultra",
			description: "Flagship Android v·ªõi b√∫t S Pen, camera 200MP v√† m√†n h√¨nh Dynamic AMOLED 2X",
			category:    "ƒêi·ªán t·ª≠",
			imageURL:    "https://cdn.tgdd.vn/Products/Images/42/307174/samsung-galaxy-s24-ultra-xam-1-750x500.jpg",
			variantImages: map[string]string{
				"X√°m":  "https://cdn.tgdd.vn/Products/Images/42/307174/samsung-galaxy-s24-ultra-xam-1-750x500.jpg",
				"ƒêen":  "https://cdn.tgdd.vn/Products/Images/42/307174/samsung-galaxy-s24-ultra-den-1-750x500.jpg",
				"T√≠m":  "https://cdn.tgdd.vn/Products/Images/42/307174/samsung-galaxy-s24-ultra-tim-1-750x500.jpg",
				"V√†ng": "https://cdn.tgdd.vn/Products/Images/42/307174/samsung-galaxy-s24-ultra-vang-1-750x500.jpg",
			},
		},
		{
			name:        "MacBook Air M3 13 inch",
			description: "Laptop si√™u m·ªèng v·ªõi chip Apple M3 v√† th·ªùi l∆∞·ª£ng pin 18 gi·ªù",
			category:    "ƒêi·ªán t·ª≠",
			imageURL:    "https://store.storeimages.cdn-apple.com/1/as-images.apple.com/is/mba13-starlight-select-202402?wid=904&hei=840&fmt=jpeg&qlt=90&.v=1708367688034",
			variantImages: map[string]string{
				"V√†ng": "https://store.storeimages.cdn-apple.com/1/as-images.apple.com/is/mba13-starlight-select-202402?wid=904&hei=840&fmt=jpeg&qlt=90&.v=1708367688034",
				"B·∫°c":  "https://store.storeimages.cdn-apple.com/1/as-images.apple.com/is/mba13-silver-select-202402?wid=904&hei=840&fmt=jpeg&qlt=90&.v=1708367688034",
				"X√°m":  "https://store.storeimages.cdn-apple.com/1/as-images.apple.com/is/mba13-spacegray-select-202402?wid=904&hei=840&fmt=jpeg&qlt=90&.v=1708367688034",
			},
		},
		{
			name:        "iPad Pro M4 11 inch",
			description: "M√°y t√≠nh b·∫£ng cao c·∫•p v·ªõi chip M4 v√† m√†n h√¨nh Liquid Retina XDR",
			category:    "ƒêi·ªán t·ª≠",
			imageURL:    "https://cdn.tgdd.vn/Products/Images/522/325513/ipad-pro-11-inch-m4-wifi-black-3-750x500.jpg",
			variantImages: map[string]string{
				"ƒêen": "https://cdn.tgdd.vn/Products/Images/522/325513/ipad-pro-11-inch-m4-wifi-black-1-750x500.jpg",
				"B·∫°c": "https://cdn.tgdd.vn/Products/Images/522/325513/ipad-pro-11-inch-m4-wifi-sliver-1-750x500.jpg",
			},
		},
		{
			name:        "AirPods Pro Gen 2",
			description: "Tai nghe true wireless v·ªõi ch·ªëng ·ªìn ch·ªß ƒë·ªông v√† chip H2",
			category:    "ƒêi·ªán t·ª≠",
			imageURL:    "https://store.storeimages.cdn-apple.com/1/as-images.apple.com/is/MQD83?wid=572&hei=572&fmt=jpeg&qlt=95&.v=1660803972361",
			variantImages: map[string]string{
				"Tr·∫Øng": "https://store.storeimages.cdn-apple.com/1/as-images.apple.com/is/MQD83?wid=572&hei=572&fmt=jpeg&qlt=95&.v=1660803972361",
			},
		},

		// TH·ªúI TRANG
		{
			name:        "√Åo thun nam Uniqlo c·ªï tr√≤n",
			description: "√Åo thun nam ch·∫•t li·ªáu cotton 100% m·ªÅm m·∫°i v√† tho√°ng m√°t",
			category:    "Th·ªùi trang",
			imageURL:    "https://image.uniqlo.com/UQ/ST3/AsianCommon/imagesgoods/422992/sub/goods_422992_sub14_3x4.jpg?width=369",
			variantImages: map[string]string{
				"ƒêen":   "https://image.uniqlo.com/UQ/ST3/vn/imagesgoods/422992/item/vngoods_09_422992_3x4.jpg?width=369",
				"Tr·∫Øng": "https://image.uniqlo.com/UQ/ST3/vn/imagesgoods/422992/item/vngoods_00_422992_3x4.jpg?width=369",
				"Xanh":  "https://image.uniqlo.com/UQ/ST3/vn/imagesgoods/422992/item/vngoods_67_422992_3x4.jpg?width=369",
				"H·ªìng":  "https://image.uniqlo.com/UQ/ST3/vn/imagesgoods/422992/item/vngoods_12_422992_3x4.jpg?width=369",
				"N√¢u":   "https://image.uniqlo.com/UQ/ST3/vn/imagesgoods/422992/item/vngoods_35_422992_3x4.jpg?width=369",
			},
		},
		{
			name:        "Gi√†y th·ªÉ thao Nike Air Force 1",
			description: "Gi√†y th·ªÉ thao kinh ƒëi·ªÉn v·ªõi ƒë·∫ø Air cushion v√† da th·∫≠t cao c·∫•p",
			category:    "Th·ªùi trang",
			imageURL:    "https://static.nike.com/a/images/t_PDP_1728_v1/f_auto,q_auto:eco/b7d9211c-26e7-431a-ac24-b0540fb3c00f/AIR+FORCE+1+%2707.png",
			variantImages: map[string]string{
				"Tr·∫Øng": "https://static.nike.com/a/images/t_PDP_1728_v1/f_auto,q_auto:eco/b7d9211c-26e7-431a-ac24-b0540fb3c00f/AIR+FORCE+1+%2707.png",
				"ƒêen":   "https://static.nike.com/a/images/t_PDP_1728_v1/f_auto,q_auto:eco/fc4622c4-2769-4665-aa6e-42c974a7705e/AIR+FORCE+1+%2707.png",
			},
		},
		{
			name:        "T√∫i ƒêeo Ch√©o Nam Coach Borsa A Tracolla Sullivan In Tela Esclusiva",
			description: "T√∫i ƒêeo Ch√©o Coach Nam Borsa A Tracolla Sullivan In Tela Esclusiva l√† chi·∫øc t√∫i d√†nh cho ph√°i m·∫°nh ƒë·∫øn t·ª´ th∆∞∆°ng hi·ªáu Coach n·ªïi ti·∫øng. T√∫i ƒë∆∞·ª£c l√†m t·ª´ ch·∫•t li·ªáu cao c·∫•p, b·ªÅn ƒë·∫πp trong su·ªët qu√° tr√¨nh s·ª≠ d·ª•ng.",
			category:    "Th·ªùi trang",
			imageURL:    "https://cdn.vuahanghieu.com/unsafe/0x500/left/top/smart/filters:quality(90)/https://admin.vuahanghieu.com/upload/product/2022/12/tui-deo-cheo-coach-nam-borsa-a-tracolla-sullivan-in-tela-esclusiva-cc009-mau-den-xam-63aab3ce1ee15-27122022155854.jpg",
			variantImages: map[string]string{
				"ƒêen": "https://cdn.vuahanghieu.com/unsafe/0x900/left/top/smart/filters:quality(90)/https://admin.vuahanghieu.com/upload/product/2022/12/tui-deo-cheo-coach-nam-borsa-a-tracolla-sullivan-in-tela-esclusiva-cc009-mau-den-xam-63aab3ce18523-27122022155854.jpg",
			},
		},

		// GIA D·ª§NG
		{
			name:        "N·ªìi c∆°m ƒëi·ªán Panasonic 1.8L",
			description: "N·ªìi c∆°m ƒëi·ªán th√¥ng minh v·ªõi c√¥ng ngh·ªá IH v√† l√≤ng n·ªìi ch·ªëng d√≠nh",
			category:    "Gia d·ª•ng",
			imageURL:    "https://cdnv2.tgdd.vn/mwg-static/dmx/Products/Images/1922/335998/noi-com-dien-tu-panasonic-1-8-lit-sr-dm184kra-1-638827266994887155-700x467.jpg",
			variantImages: map[string]string{
				"ƒêen": "https://cdnv2.tgdd.vn/mwg-static/dmx/Products/Images/1922/335998/noi-com-dien-tu-panasonic-1-8-lit-sr-dm184kra-1-638827266994887155-700x467.jpg",
			},
		},
		{
			name:        "M√°y l·ªçc kh√¥ng kh√≠ Xiaomi Mi Air Purifier 4",
			description: "M√°y l·ªçc kh√¥ng kh√≠ th√¥ng minh v·ªõi b·ªô l·ªçc HEPA H13",
			category:    "Gia d·ª•ng",
			imageURL:    "https://cdn.tgdd.vn/Products/Images/5473/314385/Slider/xiaomi-smart-air-purifier-4-compact-eu-bhr5860eu-27w638304564376429632.jpg",
			variantImages: map[string]string{
				"Tr·∫Øng": "https://cdn.tgdd.vn/Products/Images/5473/314385/Slider/xiaomi-smart-air-purifier-4-compact-eu-bhr5860eu-27w638304564376429632.jpg",
			},
		},
		{
			name:        "N·ªìi chi√™n kh√¥ng d·∫ßu Philips 4.1L",
			description: "N·ªìi chi√™n kh√¥ng d·∫ßu c√¥ng ngh·ªá Rapid Air v·ªõi dung t√≠ch 4.1L",
			category:    "Gia d·ª•ng",
			imageURL:    "https://euromixx.vn/wp-content/uploads/2024/10/010406034817-150x150.jpg",
			variantImages: map[string]string{
				"ƒêen": "https://euromixx.vn/wp-content/uploads/2024/10/010406034817-150x150.jpg",
			},
		},

		// S√ÅCH
		{
			name:        "ƒê·∫Øc Nh√¢n T√¢m - Dale Carnegie",
			description: "Cu·ªën s√°ch kinh ƒëi·ªÉn v·ªÅ ngh·ªá thu·∫≠t giao ti·∫øp v√† ·ª©ng x·ª≠",
			category:    "S√°ch",
			imageURL:    "https://static.oreka.vn/800-800_881c12cb-3fb9-4011-b6dd-fbf459fc0b92.webp",
			variantImages: map[string]string{
				"B√¨a c·ª©ng": "https://static.oreka.vn/800-800_881c12cb-3fb9-4011-b6dd-fbf459fc0b92.webp",
			},
		},
		{
			name:        "Nh√† Gi·∫£ Kim - Paulo Coelho",
			description: "Ti·ªÉu thuy·∫øt n·ªïi ti·∫øng th·∫ø gi·ªõi v·ªÅ h√†nh tr√¨nh t√¨m ki·∫øm √Ω nghƒ©a cu·ªôc s·ªëng",
			category:    "S√°ch",
			imageURL:    "https://static.oreka.vn/800-800_8177be27-d7d5-4715-99c2-3993b4b65ba7.webp",
			variantImages: map[string]string{
				"B√¨a c·ª©ng": "https://static.oreka.vn/800-800_8177be27-d7d5-4715-99c2-3993b4b65ba7.webp",
			},
		},
		{
			name:        "Sapiens - L∆∞·ª£c S·ª≠ Lo√†i Ng∆∞·ªùi B·∫±ng Tranh",
			description: "L∆∞·ª£c s·ª≠ lo√†i ng∆∞·ªùi - cu·ªën s√°ch v·ªÅ l·ªãch s·ª≠ v√† t∆∞∆°ng lai nh√¢n lo·∫°i",
			category:    "S√°ch",
			imageURL:    "https://static.oreka.vn/800-800_4bf9560a-972f-4ed2-979c-225d44f9cb18.webp",
			variantImages: map[string]string{
				"B√¨a c·ª©ng": "https://static.oreka.vn/800-800_4bf9560a-972f-4ed2-979c-225d44f9cb18.webp",
			},
		},

		// TH·ªÇ THAO
		{
			name:        "T·∫° tay ƒëi·ªÅu ch·ªânh 20kg",
			description: "T·∫° tay th√¥ng minh c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh t·ª´ 2-20kg ti·∫øt ki·ªám kh√¥ng gian",
			category:    "Th·ªÉ thao",
			imageURL:    "https://contents.mediadecathlon.com/p2599290/k$a0f24e15abaf3f5be0cd667889c26627/b%E1%BB%99-t%E1%BA%A1-th%C3%A1o-l%E1%BA%AFp-20-kg-corength-8018574.jpg?f=256x0&format=auto 256w, https://contents.mediadecathlon.com/p2599290/k$a0f24e15abaf3f5be0cd667889c26627/b%E1%BB%99-t%E1%BA%A1-th%C3%A1o-l%E1%BA%AFp-20-kg-corength-8018574.jpg?f=384x0&format=auto 384w, https://contents.mediadecathlon.com/p2599290/k$a0f24e15abaf3f5be0cd667889c26627/b%E1%BB%99-t%E1%BA%A1-th%C3%A1o-l%E1%BA%AFp-20-kg-corength-8018574.jpg?f=768x0&format=auto 768w, https://contents.mediadecathlon.com/p2599290/k$a0f24e15abaf3f5be0cd667889c26627/b%E1%BB%99-t%E1%BA%A1-th%C3%A1o-l%E1%BA%AFp-20-kg-corength-8018574.jpg?f=1024x0&format=auto 1024w, https://contents.mediadecathlon.com/p2599290/k$a0f24e15abaf3f5be0cd667889c26627/b%E1%BB%99-t%E1%BA%A1-th%C3%A1o-l%E1%BA%AFp-20-kg-corength-8018574.jpg?f=1440x0&format=auto 1440w, https://contents.mediadecathlon.com/p2599290/k$a0f24e15abaf3f5be0cd667889c26627/b%E1%BB%99-t%E1%BA%A1-th%C3%A1o-l%E1%BA%AFp-20-kg-corength-8018574.jpg?f=1920x0&format=auto 1920w",
			variantImages: map[string]string{
				"ƒêen": "https://contents.mediadecathlon.com/p2599290/k$a0f24e15abaf3f5be0cd667889c26627/b%E1%BB%99-t%E1%BA%A1-th%C3%A1o-l%E1%BA%AFp-20-kg-corength-8018574.jpg?f=256x0&format=auto 256w, https://contents.mediadecathlon.com/p2599290/k$a0f24e15abaf3f5be0cd667889c26627/b%E1%BB%99-t%E1%BA%A1-th%C3%A1o-l%E1%BA%AFp-20-kg-corength-8018574.jpg?f=384x0&format=auto 384w, https://contents.mediadecathlon.com/p2599290/k$a0f24e15abaf3f5be0cd667889c26627/b%E1%BB%99-t%E1%BA%A1-th%C3%A1o-l%E1%BA%AFp-20-kg-corength-8018574.jpg?f=768x0&format=auto 768w, https://contents.mediadecathlon.com/p2599290/k$a0f24e15abaf3f5be0cd667889c26627/b%E1%BB%99-t%E1%BA%A1-th%C3%A1o-l%E1%BA%AFp-20-kg-corength-8018574.jpg?f=1024x0&format=auto 1024w, https://contents.mediadecathlon.com/p2599290/k$a0f24e15abaf3f5be0cd667889c26627/b%E1%BB%99-t%E1%BA%A1-th%C3%A1o-l%E1%BA%AFp-20-kg-corength-8018574.jpg?f=1440x0&format=auto 1440w, https://contents.mediadecathlon.com/p2599290/k$a0f24e15abaf3f5be0cd667889c26627/b%E1%BB%99-t%E1%BA%A1-th%C3%A1o-l%E1%BA%AFp-20-kg-corength-8018574.jpg?f=1920x0&format=auto 1920w",
			},
		},
		{
			name:        "Th·∫£m t·∫≠p yoga ch·ªëng tr∆∞·ª£t 6mm",
			description: "Th·∫£m t·∫≠p yoga cao c·∫•p d√†y 6mm ch·ªëng tr∆∞·ª£t v√† th√¢n thi·ªán m√¥i tr∆∞·ªùng",
			category:    "Th·ªÉ thao",
			imageURL:    "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lp2k4n79n2aj25",
			variantImages: map[string]string{
				"Xanh": "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lp2k2y25ckm380",
				"ƒêen":  "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lp2k2y25fdqzfb",
				"H·ªìng": "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lp2k2y25gsbfbc",
			},
		},
		{
			name:        "B√≥ng ƒë√° FIFA Quality Pro",
			description: "B√≥ng ƒë√° chu·∫©n FIFA Quality Pro cho thi ƒë·∫•u chuy√™n nghi·ªáp",
			category:    "Th·ªÉ thao",
			imageURL:    "https://contents.mediadecathlon.com/p2571168/k$984defa0d32944089839f3e3c2e08b80/qu%E1%BA%A3-b%C3%B3ng-%C4%91%C3%A1-theo-ti%C3%AAu-chu%E1%BA%A9n-fifa-quality-pro-li%C3%AAn-k%E1%BA%BFt-nhi%E1%BB%87t-c%E1%BB%A1-5-pro-tr%E1%BA%AFng-kipsta-8827905.jpg?f=1920x0&format=auto",
			variantImages: map[string]string{
				"Tr·∫Øng": "https://contents.mediadecathlon.com/p2571168/k$984defa0d32944089839f3e3c2e08b80/qu%E1%BA%A3-b%C3%B3ng-%C4%91%C3%A1-theo-ti%C3%AAu-chu%E1%BA%A9n-fifa-quality-pro-li%C3%AAn-k%E1%BA%BFt-nhi%E1%BB%87t-c%E1%BB%A1-5-pro-tr%E1%BA%AFng-kipsta-8827905.jpg?f=1920x0&format=auto",
				"ƒê·ªè":    "https://contents.mediadecathlon.com/p2571092/k$bae70824ac05b30df5625da4456afad2/qu%E1%BA%A3-b%C3%B3ng-%C4%91%C3%A1-c%E1%BB%A1-5-chu%E1%BA%A9n-fifa-quality-pro-pro-%C4%91%E1%BB%8F-kipsta-8827906.jpg?f=1920x0&format=auto",
			},
		},

		// L√ÄM ƒê·∫∏P
		{
			name:        "Son m√¥i YSL Rouge Pur Couture",
			description: "Son m√¥i cao c·∫•p v·ªõi c√¥ng th·ª©c d∆∞·ª°ng ·∫©m v√† m√†u s·∫Øc l√¢u tr√¥i",
			category:    "L√†m ƒë·∫πp",
			imageURL:    "https://lipstick.vn/wp-content/uploads/2016/01/son-ysl-mau-201-orange-imagine.jpg",
			variantImages: map[string]string{
				"ƒê·ªè": "\t\t\t\t\"H·ªìng\": \"https://images.unsplash.com/photo-1522335789203-aabd1fc54bc9?w=600&h=600&fit=crop&crop=center\",\n",
			},
		},
		{
			name:        "Kem ch·ªëng n·∫Øng La Roche-Posay SPF 60",
			description: "Kem ch·ªëng n·∫Øng d√†nh cho da nh·∫°y c·∫£m SPF 60 PA++++",
			category:    "L√†m ƒë·∫πp",
			imageURL:    "https://down-vn.img.susercontent.com/file/vn-11134207-7qukw-lf6o7ah0nibud3",
			variantImages: map[string]string{
				"50ml":  "https://down-vn.img.susercontent.com/file/vn-11134207-7qukw-lf6o7ah0nibud3",
				"100ml": "https://down-vn.img.susercontent.com/file/vn-11134207-7qukw-lf6o7ah0nibud3",
			},
		},

		// TH·ª∞C PH·∫®M
		{
			name:        "G·∫°o ST25 ƒê·ªìng Th√°p",
			description: "G·∫°o th∆°m ST25 ch·∫•t l∆∞·ª£ng cao t·ª´ ƒê·ªìng Th√°p h·∫°t d·∫ªo m·ªÅm th∆°m ngon",
			category:    "Th·ª±c ph·∫©m",
			imageURL:    "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lz1zx9c987kdc5",
			variantImages: map[string]string{
				"5kg":  "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lz1zx9c987kdc5",
				"10kg": "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lz1zx9c987kdc5",
			},
		},
		{
			name:        "C√† ph√™ Trung Nguy√™n Legend 5",
			description: "C√† ph√™ pha phin truy·ªÅn th·ªëng pha ch·∫ø t·ª´ 100% c√† ph√™ Robusta v√† Arabica",
			category:    "Th·ª±c ph·∫©m",
			imageURL:    "https://salt.tikicdn.com/cache/750x750/ts/product/8f/3b/25/c73e2d9ef40438a229d06c5dc4ac035f.jpg.webp",
			variantImages: map[string]string{
				"500g": "https://salt.tikicdn.com/cache/750x750/ts/product/8f/3b/25/c73e2d9ef40438a229d06c5dc4ac035f.jpg.webp",
				"340g": "https://salt.tikicdn.com/cache/750x750/ts/product/8f/3b/25/c73e2d9ef40438a229d06c5dc4ac035f.jpg.webp",
			},
		},

		// N·ªòI TH·∫§T
		{
			name:        "Sofa 3 ch·ªó IKEA Ektorp",
			description: "Sofa 3 ch·ªó ng·ªìi b·ªçc v·∫£i khung g·ªó th√¥ng thi·∫øt k·∫ø Scandinavian",
			category:    "N·ªôi th·∫•t",
			imageURL:    "https://kika.vn/wp-content/uploads/2022/09/ghe-sofa-vang-3-cho-ngoi-boc-da-han-cao-cap-sf90-1.jpg",
			variantImages: map[string]string{
				"Xanh": "https://kika.vn/wp-content/uploads/2022/09/ghe-sofa-vang-3-cho-ngoi-boc-da-han-cao-cap-sf90-1.jpg",
				"X√°m":  "https://kika.vn/wp-content/uploads/2022/09/ghe-sofa-vang-3-cho-ngoi-boc-da-han-cao-cap-sf90-4.jpg",
			},
		},
		{
			name:        "B√†n IKEA gaming 2 h·ªôc t·ªß",
			description: "B√†n l√†m vi·ªác g·ªó th√¥ng t·ª± nhi√™n v·ªõi 2 ngƒÉn k√©o thi·∫øt k·∫ø c·ªï ƒëi·ªÉn",
			category:    "N·ªôi th·∫•t",
			imageURL:    "https://noithatdangkhoa.com/wp-content/uploads/2024/06/ban-ikea-gaming-2-hoc-tu-blvdk46-1.jpg",
			variantImages: map[string]string{
				"Tr·∫Øng": "https://noithatdangkhoa.com/wp-content/uploads/2024/06/ban-ikea-gaming-2-hoc-tu-blvdk46-2.jpg",
				"ƒêen":   "https://images.unsplash.com/photo-1506439773649-6e0eb8cfb237?w=600&h=600&fit=crop&crop=center",
			},
		},
	}

	// L·∫•y categories
	categoryNameToID := make(map[string]int64)
	rows, err := db.Query(ctx, `SELECT id, name FROM categories`)
	if err != nil {
		log.Fatalf("Error getting categories: %v", err)
	}
	defer rows.Close()

	for rows.Next() {
		var id int64
		var name string
		if err := rows.Scan(&id, &name); err != nil {
			log.Printf("Error scanning category: %v", err)
			continue
		}
		categoryNameToID[name] = id
	}

	// T·∫°o s·∫£n ph·∫©m
	totalProducts := 0
	for _, productInfo := range specificProducts {
		categoryID, categoryExists := categoryNameToID[productInfo.category]
		if !categoryExists {
			log.Printf("Category not found: %s", productInfo.category)
			continue
		}

		// Ch·ªçn supplier ng·∫´u nhi√™n
		supplierID := supplierIDs[gofakeit.Number(0, len(supplierIDs)-1)]

		// T·∫°o SKU prefix
		skuPrefix := strings.ToUpper(string([]rune(productInfo.category)[0])) +
			strings.ToUpper(string([]rune(productInfo.name)[0])) +
			fmt.Sprintf("%03d", gofakeit.Number(100, 999))

		// Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i ch∆∞a
		var existingID string
		err := db.QueryRow(ctx, `
			SELECT id FROM products WHERE name = $1 AND supplier_id = $2 AND category_id = $3
		`, productInfo.name, supplierID, categoryID).Scan(&existingID)

		var productID string
		if err != nil && err != pgx.ErrNoRows {
			log.Printf("Error checking product existence: %v", err)
			continue
		}

		if err == pgx.ErrNoRows {
			// T·∫°o m·ªõi s·∫£n ph·∫©m
			err := db.QueryRow(ctx, `
				INSERT INTO products (
					supplier_id, category_id, name, description, image_url,
					status, featured, tax_class, sku_prefix, average_rating
				)
				VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
				RETURNING id;
			`,
				supplierID, categoryID, productInfo.name, productInfo.description, productInfo.imageURL,
				"active", gofakeit.Bool(), "standard", skuPrefix, float32(gofakeit.Float32Range(3.5, 5)),
			).Scan(&productID)

			if err != nil {
				log.Printf("Error inserting product: %v", err)
				continue
			}
		} else {
			productID = existingID
		}

		// Th√™m tags
		numTags := gofakeit.Number(1, 3)
		tagNames := []string{"M·ªõi nh·∫•t", "B√°n ch·∫°y", "Ch√≠nh h√£ng", "Gi·∫£m gi√°", "Ch·∫•t l∆∞·ª£ng cao"}

		for j := 0; j < numTags; j++ {
			randomTag := tagNames[gofakeit.Number(0, len(tagNames)-1)]

			var tagID string
			err := db.QueryRow(ctx, `SELECT id FROM tags WHERE name = $1`, randomTag).Scan(&tagID)
			if err != nil {
				continue
			}

			var relationExists bool
			err = db.QueryRow(ctx, `
				SELECT EXISTS (
					SELECT 1 FROM products_tags WHERE product_id = $1 AND tag_id = $2
				)
			`, productID, tagID).Scan(&relationExists)

			if err == nil && !relationExists {
				db.Exec(ctx, `INSERT INTO products_tags (product_id, tag_id) VALUES ($1, $2)`, productID, tagID)
			}
		}

		// T·∫°o variants (3-5 variants)
		if exists {
			createOptimizedProductVariants(ctx, db, productID, skuPrefix, productInfo)
		}

		totalProducts++
	}

	log.Printf("‚úÖ Created %d products successfully", totalProducts)
}

func createOptimizedProductVariants(
	ctx context.Context,
	db *pgxpool.Pool,
	productID string,
	skuPrefix string,
	productInfo struct {
		name          string
		description   string
		category      string
		imageURL      string
		variantImages map[string]string
	},
) {
	// L·∫•y thu·ªôc t√≠nh cho category
	categoryAttrs, ok := categoryAttributes[productInfo.category]
	if !ok {
		// Fallback attributes n·∫øu category kh√¥ng c√≥
		categoryAttrs = map[string][]string{
			"M√†u s·∫Øc": {"ƒêen", "Tr·∫Øng", "X√°m"},
		}
	}

	log.Printf("Creating variants for product: %s with category: %s", productInfo.name, productInfo.category)

	// T·∫°o t·∫•t c·∫£ combinations c√≥ th·ªÉ t·ª´ category attributes
	var variants []map[string]string

	// L·∫•y t·∫•t c·∫£ attribute names v√† options t·ª´ category
	attrNames := make([]string, 0, len(categoryAttrs))
	attrOptions := make(map[string][]string)

	for name, options := range categoryAttrs {
		attrNames = append(attrNames, name)
		attrOptions[name] = options
	}

	// N·∫øu c√≥ variantImages, ∆∞u ti√™n t·∫°o variants theo m√†u s·∫Øc c√≥ ·∫£nh
	if len(productInfo.variantImages) > 0 {
		colorOptions := make([]string, 0, len(productInfo.variantImages))
		for color := range productInfo.variantImages {
			colorOptions = append(colorOptions, color)
		}
		attrOptions["M√†u s·∫Øc"] = colorOptions

		// ƒê·∫£m b·∫£o "M√†u s·∫Øc" l√† attribute ƒë·∫ßu ti√™n
		if !stringInSlice("M√†u s·∫Øc", attrNames) {
			attrNames = append([]string{"M√†u s·∫Øc"}, attrNames...)
		}
	}

	// T·∫°o combinations th√¥ng minh d·ª±a tr√™n category
	switch productInfo.category {
	case "ƒêi·ªán t·ª≠":
		variants = createElectronicsVariants(attrOptions, productInfo.variantImages)
	case "Th·ªùi trang":
		variants = createFashionVariants(attrOptions, productInfo.variantImages)
	case "Gia d·ª•ng":
		variants = createApplianceVariants(attrOptions, productInfo.variantImages)
	case "S√°ch":
		variants = createBookVariants(attrOptions)
	case "Th·ªÉ thao":
		variants = createSportsVariants(attrOptions, productInfo.variantImages)
	case "L√†m ƒë·∫πp":
		variants = createBeautyVariants(attrOptions, productInfo.variantImages)
	case "Th·ª±c ph·∫©m":
		variants = createFoodVariants(attrOptions, productInfo.variantImages)
	case "N·ªôi th·∫•t":
		variants = createFurnitureVariants(attrOptions, productInfo.variantImages)
	default:
		variants = createGeneralVariants(attrOptions, productInfo.variantImages)
	}

	// ƒê·∫£m b·∫£o m·ªçi s·∫£n ph·∫©m ƒë·ªÅu c√≥ √≠t nh·∫•t 1 variant
	if len(variants) == 0 {
		// T·∫°o variant c∆° b·∫£n v·ªõi thu·ªôc t√≠nh ƒë·∫ßu ti√™n
		defaultVariant := make(map[string]string)
		for attrName, options := range attrOptions {
			if len(options) > 0 {
				defaultVariant[attrName] = options[0]
				break
			}
		}
		if len(defaultVariant) == 0 {
			defaultVariant["M√†u s·∫Øc"] = "ƒêen"
		}
		variants = append(variants, defaultVariant)
	}

	// Gi·ªõi h·∫°n t·ªëi ƒëa 8 variants ƒë·ªÉ tr√°nh qu√° nhi·ªÅu
	if len(variants) > 8 {
		variants = variants[:8]
	}

	log.Printf("Generated %d variants for product %s", len(variants), productInfo.name)

	// L·∫•y attribute definitions v√† options
	attributeDefs := make(map[string]int)
	attributeOptions := make(map[string]map[string]int)

	for _, variant := range variants {
		for attrName := range variant {
			if _, exists := attributeDefs[attrName]; !exists {
				var attrID int
				err := db.QueryRow(ctx, `SELECT id FROM attribute_definitions WHERE name = $1`, attrName).Scan(&attrID)
				if err != nil {
					log.Printf("Attribute definition not found: %s", attrName)
					continue
				}
				attributeDefs[attrName] = attrID
				attributeOptions[attrName] = make(map[string]int)

				// L·∫•y options
				rows, err := db.Query(ctx, `
					SELECT id, option_value FROM attribute_options 
					WHERE attribute_definition_id = $1
				`, attrID)
				if err != nil {
					log.Printf("Error getting attribute options: %v", err)
					continue
				}

				for rows.Next() {
					var optionID int
					var optionValue string
					if err := rows.Scan(&optionID, &optionValue); err == nil {
						attributeOptions[attrName][optionValue] = optionID
					}
				}
				rows.Close()
			}
		}
	}

	// T·∫°o variants
	for i, variant := range variants {
		// T·∫°o SKU unique
		timestamp := time.Now().UnixNano() % 1000000
		uniqueSKU := fmt.Sprintf("%s-%d-%d", skuPrefix, i+1, timestamp)

		// T·∫°o t√™n variant t·ª´ t·∫•t c·∫£ attributes
		var variantNameParts []string
		for attr, value := range variant {
			variantNameParts = append(variantNameParts, fmt.Sprintf("%s: %s", attr, value))
		}
		variantName := strings.Join(variantNameParts, ", ")

		// Ch·ªçn ·∫£nh cho variant
		variantImage := productInfo.imageURL
		if colorValue, ok := variant["M√†u s·∫Øc"]; ok {
			if specificImage, exists := productInfo.variantImages[colorValue]; exists {
				variantImage = specificImage
			}
		}

		// T√≠nh gi√° d·ª±a tr√™n t·∫•t c·∫£ attributes
		basePrice := getBasePriceForCategory(productInfo.category)

		// √Åp d·ª•ng multiplier cho t·ª´ng attribute
		for attrName, attrValue := range variant {
			multiplier := getOptimizedPriceMultiplier(attrName, attrValue)
			basePrice = basePrice * multiplier
		}

		// L√†m tr√≤n gi√°
		basePrice = float32(math.Round(float64(basePrice/1000)) * 1000)

		// Discount ng·∫´u nhi√™n
		var discountPriceParam interface{} = nil
		if gofakeit.Bool() { // 50% chance c√≥ discount
			discountPercent := gofakeit.Float32Range(0.1, 0.3) // 10-30%
			discountPrice := basePrice * (1 - discountPercent)
			discountPrice = float32(math.Round(float64(discountPrice/1000)) * 1000)
			if discountPrice < basePrice {
				discountPriceParam = discountPrice
			}
		}

		// Insert variant
		var variantID string
		err := db.QueryRow(ctx, `
			INSERT INTO product_variants (
				product_id, sku, variant_name, price, discount_price,
				inventory_quantity, shipping_class, image_url, alt_text, is_default, is_active
			)
			VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
			RETURNING id;
		`,
			productID, uniqueSKU, variantName, basePrice, discountPriceParam,
			gofakeit.Number(10, 100), "standard", variantImage, variantName, i == 0, true,
		).Scan(&variantID)

		if err != nil {
			log.Printf("Error inserting variant: %v", err)
			continue
		}

		// Th√™m t·∫•t c·∫£ attributes cho variant
		for attrName, attrValue := range variant {
			attrID, ok := attributeDefs[attrName]
			if !ok {
				log.Printf("Attribute definition not found: %s", attrName)
				continue
			}

			optionID, ok := attributeOptions[attrName][attrValue]
			if !ok {
				// T·∫°o option m·ªõi n·∫øu ch∆∞a c√≥
				err := db.QueryRow(ctx, `
					INSERT INTO attribute_options (attribute_definition_id, option_value)
					VALUES ($1, $2) RETURNING id;
				`, attrID, attrValue).Scan(&optionID)
				if err != nil {
					log.Printf("Error creating attribute option: %v", err)
					continue
				}
				attributeOptions[attrName][attrValue] = optionID
			}

			// Th√™m attribute cho variant
			_, err = db.Exec(ctx, `
				INSERT INTO product_variant_attributes (
					product_variant_id, attribute_definition_id, attribute_option_id
				) VALUES ($1, $2, $3);
			`, variantID, attrID, optionID)

			if err != nil {
				log.Printf("Error inserting variant attribute: %v", err)
			}
		}

		log.Printf("Created variant: %s for product %s", variantName, productInfo.name)
	}

	log.Printf("Successfully created %d variants for product %s", len(variants), productInfo.name)
}

// Helper functions ƒë·ªÉ t·∫°o variants cho t·ª´ng category

func createElectronicsVariants(attrOptions map[string][]string, variantImages map[string]string) []map[string]string {
	var variants []map[string]string

	// Electronics: M√†u s·∫Øc + Dung l∆∞·ª£ng
	colors := getAttrOptions(attrOptions, "M√†u s·∫Øc", []string{"ƒêen", "Tr·∫Øng", "Xanh"})
	capacities := getAttrOptions(attrOptions, "Dung l∆∞·ª£ng", []string{"64GB", "128GB", "256GB"})

	// T·∫°o combinations v·ªõi ch·ªâ 2 attributes
	for _, color := range colors {
		for _, capacity := range capacities {
			variant := map[string]string{
				"M√†u s·∫Øc":    color,
				"Dung l∆∞·ª£ng": capacity,
			}
			variants = append(variants, variant)
		}
	}

	return variants
}

func createFashionVariants(attrOptions map[string][]string, variantImages map[string]string) []map[string]string {
	var variants []map[string]string

	// Fashion: M√†u s·∫Øc + K√≠ch th∆∞·ªõc
	colors := getAttrOptions(attrOptions, "M√†u s·∫Øc", []string{"ƒêen", "Tr·∫Øng", "Xanh"})
	sizes := getAttrOptions(attrOptions, "K√≠ch th∆∞·ªõc", []string{"S", "M", "L", "XL"})

	for _, color := range colors {
		for _, size := range sizes {
			variant := map[string]string{
				"M√†u s·∫Øc":    color,
				"K√≠ch th∆∞·ªõc": size,
			}
			variants = append(variants, variant)
		}
	}

	return variants
}

func createApplianceVariants(attrOptions map[string][]string, variantImages map[string]string) []map[string]string {
	var variants []map[string]string

	// Gia d·ª•ng: M√†u s·∫Øc + C√¥ng su·∫•t
	colors := getAttrOptions(attrOptions, "M√†u s·∫Øc", []string{"ƒêen", "Tr·∫Øng", "B·∫°c"})
	powers := getAttrOptions(attrOptions, "C√¥ng su·∫•t", []string{"500W", "1000W", "1500W"})

	for _, color := range colors {
		for _, power := range powers {
			variant := map[string]string{
				"M√†u s·∫Øc":   color,
				"C√¥ng su·∫•t": power,
			}
			variants = append(variants, variant)
		}
	}

	return variants
}

func createBookVariants(attrOptions map[string][]string) []map[string]string {
	var variants []map[string]string

	// S√°ch: Lo·∫°i b√¨a + Ng√¥n ng·ªØ
	covers := getAttrOptions(attrOptions, "Lo·∫°i b√¨a", []string{"B√¨a m·ªÅm", "B√¨a c·ª©ng"})
	languages := getAttrOptions(attrOptions, "Ng√¥n ng·ªØ", []string{"Ti·∫øng Vi·ªát", "Ti·∫øng Anh"})

	for _, cover := range covers {
		for _, lang := range languages {
			variant := map[string]string{
				"Lo·∫°i b√¨a": cover,
				"Ng√¥n ng·ªØ": lang,
			}
			variants = append(variants, variant)
		}
	}

	return variants
}

func createSportsVariants(attrOptions map[string][]string, variantImages map[string]string) []map[string]string {
	var variants []map[string]string

	// Th·ªÉ thao: M√†u s·∫Øc + K√≠ch th∆∞·ªõc
	colors := getAttrOptions(attrOptions, "M√†u s·∫Øc", []string{"ƒêen", "Xanh", "ƒê·ªè"})
	sizes := getAttrOptions(attrOptions, "K√≠ch th∆∞·ªõc", []string{"Nh·ªè", "V·ª´a", "L·ªõn"})

	for _, color := range colors {
		for _, size := range sizes {
			variant := map[string]string{
				"M√†u s·∫Øc":    color,
				"K√≠ch th∆∞·ªõc": size,
			}
			variants = append(variants, variant)
		}
	}

	return variants
}

func createBeautyVariants(attrOptions map[string][]string, variantImages map[string]string) []map[string]string {
	var variants []map[string]string

	// L√†m ƒë·∫πp: M√†u s·∫Øc + Dung t√≠ch
	colors := getAttrOptions(attrOptions, "M√†u s·∫Øc", []string{"ƒê·ªè", "H·ªìng", "Nude"})
	capacities := getAttrOptions(attrOptions, "Dung t√≠ch", []string{"15ml", "30ml", "50ml"})

	for _, color := range colors {
		for _, capacity := range capacities {
			variant := map[string]string{
				"M√†u s·∫Øc":   color,
				"Dung t√≠ch": capacity,
			}
			variants = append(variants, variant)
		}
	}

	return variants
}

func createFoodVariants(attrOptions map[string][]string, variantImages map[string]string) []map[string]string {
	var variants []map[string]string

	// Th·ª±c ph·∫©m: Tr·ªçng l∆∞·ª£ng + Xu·∫•t x·ª©
	weights := getAttrOptions(attrOptions, "Tr·ªçng l∆∞·ª£ng", []string{"340g", "500g", "1kg", "5kg"})
	origins := getAttrOptions(attrOptions, "Xu·∫•t x·ª©", []string{"Vi·ªát Nam", "Th√°i Lan", "Nh·∫≠t B·∫£n"})

	for _, weight := range weights {
		for _, origin := range origins {
			variant := map[string]string{
				"Tr·ªçng l∆∞·ª£ng": weight,
				"Xu·∫•t x·ª©":     origin,
			}
			variants = append(variants, variant)
		}
	}

	return variants
}

func createFurnitureVariants(attrOptions map[string][]string, variantImages map[string]string) []map[string]string {
	var variants []map[string]string

	// N·ªôi th·∫•t: M√†u s·∫Øc + K√≠ch th∆∞·ªõc (B·ªé Ch·∫•t li·ªáu)
	colors := getAttrOptions(attrOptions, "M√†u s·∫Øc", []string{"Tr·∫Øng", "N√¢u", "ƒêen"})
	sizes := getAttrOptions(attrOptions, "K√≠ch th∆∞·ªõc", []string{"Nh·ªè", "V·ª´a", "L·ªõn"})

	for _, color := range colors {
		for _, size := range sizes {
			variant := map[string]string{
				"M√†u s·∫Øc":    color,
				"K√≠ch th∆∞·ªõc": size,
			}
			variants = append(variants, variant)
		}
	}

	return variants
}

func createGeneralVariants(attrOptions map[string][]string, variantImages map[string]string) []map[string]string {
	var variants []map[string]string

	// General case: L·∫•y 2 attributes ƒë·∫ßu ti√™n v√† t·∫°o combinations
	attrNames := make([]string, 0, len(attrOptions))
	for name := range attrOptions {
		attrNames = append(attrNames, name)
		if len(attrNames) >= 2 {
			break
		}
	}

	if len(attrNames) >= 2 {
		firstAttrOptions := attrOptions[attrNames[0]]
		secondAttrOptions := attrOptions[attrNames[1]]

		for _, firstVal := range firstAttrOptions {
			for _, secondVal := range secondAttrOptions {
				variant := map[string]string{
					attrNames[0]: firstVal,
					attrNames[1]: secondVal,
				}
				variants = append(variants, variant)
			}
		}
	} else if len(attrNames) == 1 {
		// Ch·ªâ c√≥ 1 attribute, t·∫°o variants ƒë∆°n gi·∫£n
		for _, val := range attrOptions[attrNames[0]] {
			variant := map[string]string{
				attrNames[0]: val,
			}
			variants = append(variants, variant)
		}
	}

	return variants
}

// Helper functions
func getAttrOptions(attrOptions map[string][]string, attrName string, defaultOptions []string) []string {
	if options, exists := attrOptions[attrName]; exists && len(options) > 0 {
		return options
	}
	return defaultOptions
}

func getBasePriceForCategory(category string) float32 {
	basePrices := map[string][2]float32{
		"ƒêi·ªán t·ª≠":    {500000, 5000000},  // 500k - 5tr
		"Th·ªùi trang": {100000, 2000000},  // 100k - 2tr
		"Gia d·ª•ng":   {200000, 3000000},  // 200k - 3tr
		"S√°ch":       {50000, 300000},    // 50k - 300k
		"Th·ªÉ thao":   {100000, 1000000},  // 100k - 1tr
		"L√†m ƒë·∫πp":    {100000, 1500000},  // 100k - 1.5tr
		"Th·ª±c ph·∫©m":  {20000, 500000},    // 20k - 500k
		"N·ªôi th·∫•t":   {500000, 10000000}, // 500k - 10tr
	}

	if priceRange, exists := basePrices[category]; exists {
		return gofakeit.Float32Range(priceRange[0], priceRange[1])
	}

	return gofakeit.Float32Range(100000, 1000000) // Default range
}

func getOptimizedPriceMultiplier(attrName, attrValue string) float32 {
	multipliers := map[string]map[string]float32{
		"K√≠ch th∆∞·ªõc": {
			"S": 0.9, "M": 1.0, "L": 1.1, "XL": 1.2, "XXL": 1.3,
		},
		"Dung l∆∞·ª£ng": {
			"64GB": 0.9, "128GB": 1.0, "256GB": 1.2, "512GB": 1.5, "1TB": 1.8,
		},
		"RAM": {
			"8GB": 1.0, "16GB": 1.2, "32GB": 1.5,
		},
		"Tr·ªçng l∆∞·ª£ng": {
			"340g": 0.9, "500g": 1.0, "1kg": 1.1, "5kg": 1.3, "10kg": 1.5,
		},
		"Dung t√≠ch": {
			"15ml": 0.8, "30ml": 1.0, "50ml": 1.2, "100ml": 1.4,
			"1L": 0.9, "1.8L": 1.0, "2L": 1.1, "4L": 1.3,
		},
	}

	if attrMultipliers, exists := multipliers[attrName]; exists {
		if multiplier, exists := attrMultipliers[attrValue]; exists {
			return multiplier
		}
	}
	return 1.0 // Default multiplier
}

// C·∫£i ti·∫øn seedAttributeDefinitions ƒë·ªÉ ƒë·∫£m b·∫£o r·∫±ng c√°c thu·ªôc t√≠nh ƒë∆∞·ª£c t·∫°o ƒë√∫ng
func seedAttributeDefinitions(ctx context.Context, db *pgxpool.Pool) {
	attributes := []struct {
		name, desc, inputType    string
		isFilterable, isRequired bool
	}{
		// Thu·ªôc t√≠nh c∆° b·∫£n - ch·ªâ gi·ªØ l·∫°i nh·ªØng c√°i c·∫ßn thi·∫øt
		{"M√†u s·∫Øc", "M√†u s·∫Øc c·ªßa s·∫£n ph·∫©m", "select", true, true},
		{"K√≠ch th∆∞·ªõc", "K√≠ch th∆∞·ªõc c·ªßa s·∫£n ph·∫©m", "select", true, true},
		{"Dung l∆∞·ª£ng", "Dung l∆∞·ª£ng l∆∞u tr·ªØ", "select", true, false},
		{"C√¥ng su·∫•t", "C√¥ng su·∫•t thi·∫øt b·ªã", "select", false, false},
		{"Ng√¥n ng·ªØ", "Ng√¥n ng·ªØ s√°ch", "select", true, false},
		{"Lo·∫°i b√¨a", "Lo·∫°i b√¨a s√°ch", "select", false, false},
		{"Dung t√≠ch", "Dung t√≠ch c·ªßa s·∫£n ph·∫©m", "select", true, false},
		{"Tr·ªçng l∆∞·ª£ng", "Tr·ªçng l∆∞·ª£ng c·ªßa s·∫£n ph·∫©m", "select", true, false}, // TH√äM C√ÅI N√ÄY
		{"Xu·∫•t x·ª©", "Qu·ªëc gia xu·∫•t x·ª©", "select", false, false},
	}

	// Seed attribute definitions
	for _, attr := range attributes {
		// Ki·ªÉm tra xem thu·ªôc t√≠nh ƒë√£ t·ªìn t·∫°i ch∆∞a
		var count int
		err := db.QueryRow(ctx, `
			SELECT COUNT(*) FROM attribute_definitions WHERE name = $1
		`, attr.name).Scan(&count)

		if err != nil {
			log.Printf("Error checking attribute existence: %v", err)
			continue
		}

		var attrID int
		if count == 0 {
			// N·∫øu kh√¥ng t·ªìn t·∫°i, th√™m m·ªõi
			err := db.QueryRow(ctx, `
				INSERT INTO attribute_definitions (name, description, input_type, is_filterable, is_required)
				VALUES ($1, $2, $3, $4, $5)
				RETURNING id;
			`, attr.name, attr.desc, attr.inputType, attr.isFilterable, attr.isRequired).Scan(&attrID)

			if err != nil {
				log.Printf("Error inserting attribute definition: %v", err)
				continue
			}
		} else {
			// N·∫øu ƒë√£ t·ªìn t·∫°i, l·∫•y ID
			err := db.QueryRow(ctx, `
				SELECT id FROM attribute_definitions WHERE name = $1
			`, attr.name).Scan(&attrID)

			if err != nil {
				log.Printf("Error getting attribute ID: %v", err)
				continue
			}
		}

		// Seed attribute options based on category_attributes map
		if options, exists := getAttributeOptions(attr.name); exists {
			for _, option := range options {
				// Ki·ªÉm tra xem option ƒë√£ t·ªìn t·∫°i ch∆∞a
				var optionCount int
				err := db.QueryRow(ctx, `
					SELECT COUNT(*) FROM attribute_options 
					WHERE attribute_definition_id = $1 AND option_value = $2
				`, attrID, option).Scan(&optionCount)

				if err != nil {
					log.Printf("Error checking option existence: %v", err)
					continue
				}

				if optionCount == 0 {
					_, err := db.Exec(ctx, `
						INSERT INTO attribute_options (attribute_definition_id, option_value)
						VALUES ($1, $2);
					`, attrID, option)

					if err != nil {
						log.Printf("Error inserting attribute option: %v", err)
					}
				}
			}
		}
	}
	log.Println("‚úÖ Attribute definitions and options seeded successfully")
}

// H√†m helper ƒë·ªÉ l·∫•y min
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// Function to create more realistic product variants with appropriate attributes and images
func createProductVariants(
	ctx context.Context,
	db *pgxpool.Pool,
	productID string,
	skuPrefix string,
	categoryAttrs map[string][]string,
	categoryName string,
	baseProductImage string,
) {
	// Get all valid attribute names from the category attributes
	var validAttrNames []string
	for attrName := range categoryAttrs {
		var exists bool
		err := db.QueryRow(ctx, `
			SELECT EXISTS (
				SELECT 1 FROM attribute_definitions WHERE name = $1
			)
		`, attrName).Scan(&exists)

		if err != nil {
			log.Printf("Error checking attribute existence: %v", err)
			continue
		}

		if exists {
			validAttrNames = append(validAttrNames, attrName)
		}
	}

	// Define category-specific primary attributes
	categoryPrimaryAttributes := map[string][]string{
		"Th·ªùi trang nam":        {"K√≠ch th∆∞·ªõc", "M√†u s·∫Øc"},
		"Th·ªùi trang n·ªØ":         {"K√≠ch th∆∞·ªõc", "M√†u s·∫Øc"},
		"Th·ªùi trang tr·∫ª em":     {"K√≠ch th∆∞·ªõc", "M√†u s·∫Øc"},
		"Gi√†y d√©p":              {"K√≠ch th∆∞·ªõc", "M√†u s·∫Øc"},
		"ƒêi·ªán tho·∫°i th√¥ng minh": {"M√†u s·∫Øc", "Dung l∆∞·ª£ng"},
		"M√°y t√≠nh x√°ch tay":     {"M√†u s·∫Øc", "RAM", "·ªî c·ª©ng"},
		"M√°y t√≠nh b·∫£ng":         {"M√†u s·∫Øc", "Dung l∆∞·ª£ng", "K·∫øt n·ªëi"},
		"Tai nghe & Loa":        {"M√†u s·∫Øc", "Ki·ªÉu ƒëeo", "Lo·∫°i k·∫øt n·ªëi"},
		"M√°y ·∫£nh & M√°y quay":    {"M√†u s·∫Øc", "ƒê·ªô ph√¢n gi·∫£i", "C·∫£m bi·∫øn"},
		"ƒê·ªì gia d·ª•ng":           {"M√†u s·∫Øc", "C√¥ng su·∫•t", "Ch·∫•t li·ªáu"},
		"T·ªß l·∫°nh & T·ªß ƒë√¥ng":     {"M√†u s·∫Øc", "Dung t√≠ch", "C√¥ng su·∫•t"},
		"ƒê·ªì d√πng ph√≤ng ng·ªß":     {"K√≠ch th∆∞·ªõc gi∆∞·ªùng", "M√†u s·∫Øc", "Ch·∫•t li·ªáu"},
		"N·ªôi th·∫•t ph√≤ng kh√°ch":  {"Ch·∫•t li·ªáu", "M√†u s·∫Øc", "K√≠ch th∆∞·ªõc"},
	}

	// Choose appropriate attributes for this category
	var chosenAttributes []string
	if primaryAttrs, ok := categoryPrimaryAttributes[categoryName]; ok {
		// Use category-specific attributes if available
		for _, attr := range primaryAttrs {
			if stringInSlice(attr, validAttrNames) {
				chosenAttributes = append(chosenAttributes, attr)
			}
			if len(chosenAttributes) >= 2 {
				break
			}
		}
	}

	// If no specific attributes were chosen, use sensible defaults based on valid attrs
	if len(chosenAttributes) == 0 {
		// Try to find common important attributes
		commonImportantAttrs := []string{"K√≠ch th∆∞·ªõc", "M√†u s·∫Øc", "Ch·∫•t li·ªáu", "Dung l∆∞·ª£ng"}
		for _, attr := range commonImportantAttrs {
			if stringInSlice(attr, validAttrNames) {
				chosenAttributes = append(chosenAttributes, attr)
			}
			if len(chosenAttributes) >= 2 {
				break
			}
		}

		// If still no attributes, use first available
		if len(chosenAttributes) == 0 && len(validAttrNames) > 0 {
			chosenAttributes = append(chosenAttributes, validAttrNames[0])
		}
	}

	// Ensure we have at least one attribute
	if len(chosenAttributes) == 0 {
		log.Printf("No valid attributes found for product: %s in category: %s", productID, categoryName)
		return
	}

	// Get attribute definitions and options
	attributeDefs := make(map[string]int)
	attributeOptions := make(map[string]map[string]int)

	for _, attrName := range chosenAttributes {
		var attrID int
		err := db.QueryRow(ctx, `SELECT id FROM attribute_definitions WHERE name = $1`, attrName).Scan(&attrID)
		if err != nil {
			log.Printf("Error getting attribute definition: %v", err)
			continue
		}

		attributeDefs[attrName] = attrID
		attributeOptions[attrName] = make(map[string]int)

		// Get options for this attribute
		rows, err := db.Query(ctx, `
			SELECT id, option_value FROM attribute_options 
			WHERE attribute_definition_id = $1
		`, attrID)

		if err != nil {
			log.Printf("Error getting attribute options: %v", err)
			continue
		}

		defer rows.Close()
		for rows.Next() {
			var optionID int
			var optionValue string
			if err := rows.Scan(&optionID, &optionValue); err != nil {
				log.Printf("Error scanning attribute option: %v", err)
				continue
			}
			attributeOptions[attrName][optionValue] = optionID
		}
	}

	// Generate variant combinations based on chosen attributes
	variantCombinations := generateVariantCombinations(chosenAttributes, categoryAttrs)

	// Variant-specific image collection based on product category
	categorySpecificImageURLs := map[string]map[string]string{
		"M√†u s·∫Øc": {
			"ƒêen":   "https://images.unsplash.com/photo-1622434641406-a158123450f9?ixlib=rb-4.0.3&q=80&w=1000",
			"Tr·∫Øng": "https://images.unsplash.com/photo-1622434641406-a158123450f9?ixlib=rb-4.0.3&q=80&w=1000&auto=format&fit=crop&ixlib=rb-4.0.3",
			"Xanh":  "https://images.unsplash.com/photo-1606107557195-0e29a4b5b4aa?ixlib=rb-4.0.3&q=80&w=1000&auto=format&fit=crop",
			"ƒê·ªè":    "https://images.unsplash.com/photo-1542291026-7eec264c27ff?ixlib=rb-4.0.3&q=80&w=1000&auto=format&fit=crop",
			"V√†ng":  "https://images.unsplash.com/photo-1595950653106-6c9ebd614d3a?ixlib=rb-4.0.3&q=80&w=1000&auto=format&fit=crop",
		},
	}

	// Create variants for each combination
	for i, combo := range variantCombinations {
		// Generate a unique SKU
		timestamp := time.Now().UnixNano() % 1000000
		uniqueSKU := fmt.Sprintf("%s-%d-%d", skuPrefix, i+1, timestamp)

		// Create variant name from combination
		var variantNameParts []string
		for attr, value := range combo {
			variantNameParts = append(variantNameParts, fmt.Sprintf("%s: %s", attr, value))
		}
		variantName := strings.Join(variantNameParts, ", ")

		// Select appropriate image for the variant
		variantImage := baseProductImage
		// If this is a color variant, try to find a color-specific image
		if colorValue, ok := combo["M√†u s·∫Øc"]; ok {
			if colorImages, ok := categorySpecificImageURLs["M√†u s·∫Øc"]; ok {
				if img, ok := colorImages[colorValue]; ok {
					variantImage = img
				}
			}
		}

		// Set pricing based on variant attributes
		basePrice := gofakeit.Float32Range(100000, 5000000) // 100k - 5tr VND
		// Round price to nearest 1000 VND
		basePrice = float32(math.Round(float64(basePrice/1000)) * 1000)

		// Size affects price - larger sizes cost more
		if sizeValue, ok := combo["K√≠ch th∆∞·ªõc"]; ok {
			sizeMultipliers := map[string]float32{
				"S":     0.9,
				"M":     1.0,
				"L":     1.1,
				"XL":    1.2,
				"XXL":   1.3,
				"XXXL":  1.4,
				"4GB":   0.8,
				"8GB":   1.0,
				"16GB":  1.3,
				"32GB":  1.6,
				"64GB":  1.9,
				"128GB": 1.2,
				"256GB": 1.5,
				"512GB": 1.8,
				"1TB":   2.0,
			}

			if multiplier, ok := sizeMultipliers[sizeValue]; ok {
				basePrice = basePrice * multiplier
				// Round again after applying multiplier
				basePrice = float32(math.Round(float64(basePrice/1000)) * 1000)
			}
		}

		// Set discount price (for some variants)
		discountPrice := basePrice
		hasDiscount := gofakeit.Bool()
		if hasDiscount {
			discountPercent := gofakeit.Float32Range(0.05, 0.25)
			discountAmount := float32(math.Floor(float64(basePrice*discountPercent)/1000) * 1000)

			// Ensure minimum discount is 5000 VND and discount price is lower than base price
			if discountAmount < 5000 {
				discountAmount = 5000
			}

			// Limit maximum discount to 80% of base price
			if discountAmount > basePrice*0.8 {
				discountAmount = float32(math.Floor(float64(basePrice*0.8)/1000) * 1000)
			}

			discountPrice = basePrice - discountAmount

			// Final check to ensure discount price is valid
			if discountPrice >= basePrice || discountPrice <= 0 {
				discountPrice = basePrice * 0.85 // Default 15% discount
			}
		}

		// Insert variant
		var variantID string
		var discountPriceParam interface{}
		if hasDiscount {
			discountPriceParam = discountPrice
		} else {
			discountPriceParam = nil
		}

		err := db.QueryRow(ctx, `
			INSERT INTO product_variants (
				product_id, sku, variant_name, price, discount_price,
				inventory_quantity, shipping_class, image_url, alt_text, is_default, is_active
			)
			VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
			RETURNING id;
		`,
			productID, uniqueSKU, variantName, basePrice, discountPriceParam,
			gofakeit.Number(5, 100), "standard", variantImage, variantName, i == 0, true,
		).Scan(&variantID)

		if err != nil {
			log.Printf("Error inserting product variant: %v", err)
			continue
		}

		// Add attribute associations for this variant
		for attr, value := range combo {
			attrID, ok := attributeDefs[attr]
			if !ok {
				continue
			}

			optionID, ok := attributeOptions[attr][value]
			if !ok {
				// Create option if it doesn't exist
				err := db.QueryRow(ctx, `
					INSERT INTO attribute_options (attribute_definition_id, option_value)
					VALUES ($1, $2)
					RETURNING id;
				`, attrID, value).Scan(&optionID)

				if err != nil {
					log.Printf("Error creating attribute option: %v", err)
					continue
				}
				attributeOptions[attr][value] = optionID
			}

			// Add the attribute to the variant
			_, err = db.Exec(ctx, `
				INSERT INTO product_variant_attributes (
					product_variant_id, attribute_definition_id, attribute_option_id
				)
				VALUES ($1, $2, $3);
			`, variantID, attrID, optionID)

			if err != nil {
				log.Printf("Error inserting product variant attribute: %v", err)
			}
		}
	}

	log.Printf("Created %d variants for product %s", len(variantCombinations), productID)
}

// Helper function to generate variant combinations
func generateVariantCombinations(attributes []string, categoryAttrs map[string][]string) []map[string]string {
	if len(attributes) == 0 {
		return []map[string]string{make(map[string]string)}
	}

	// For realistic product catalogs, limit the number of combinations
	// For example, not every color needs to be available in every size
	maxCombinations := 6

	var combinations []map[string]string

	// Start with first attribute
	firstAttr := attributes[0]
	options := categoryAttrs[firstAttr]

	// Limit options to keep combinations reasonable
	if len(options) > 4 {
		// Shuffle and take a subset
		gofakeit.ShuffleAnySlice(options)
		options = options[:min(4, len(options))]
	}

	for _, option := range options {
		combo := map[string]string{firstAttr: option}
		combinations = append(combinations, combo)
	}

	// Add second attribute if available
	if len(attributes) >= 2 {
		secondAttr := attributes[1]
		options = categoryAttrs[secondAttr]

		// Limit options
		if len(options) > 3 {
			gofakeit.ShuffleAnySlice(options)
			options = options[:min(3, len(options))]
		}

		var newCombinations []map[string]string
		for _, combo := range combinations {
			for _, option := range options {
				newCombo := copyMap(combo)
				newCombo[secondAttr] = option
				newCombinations = append(newCombinations, newCombo)
				if len(newCombinations) >= maxCombinations {
					break
				}
			}
			if len(newCombinations) >= maxCombinations {
				break
			}
		}
		combinations = newCombinations
	}

	return combinations
}

// Helper function to copy a map
func copyMap(m map[string]string) map[string]string {
	result := make(map[string]string)
	for k, v := range m {
		result[k] = v
	}
	return result
}

func stringInSlice(needle string, haystack []string) bool {
	for _, item := range haystack {
		if item == needle {
			return true
		}
	}
	return false
}

func seedDelivererProfiles(ctx context.Context, db *pgxpool.Pool, delivererUserIDs []int64, adminDivisions []Province) {
	for _, userID := range delivererUserIDs {
		// T·∫°o th√¥ng tin ng·∫´u nhi√™n cho ng∆∞·ªùi giao h√†ng
		idCard := fmt.Sprintf("%09d", gofakeit.Number(100000000, 999999999))
		vehicleTypes := []string{"Xe m√°y", "√î t√¥", "Xe ƒë·∫°p"}
		vehicleType := vehicleTypes[gofakeit.Number(0, len(vehicleTypes)-1)]
		licensePlate := fmt.Sprintf("%02d-%s%d",
			gofakeit.Number(10, 99),
			string([]rune("ABCDEFGHKLMNPRSTUVXYZ")[gofakeit.Number(0, 20)]),
			gofakeit.Number(10000, 99999))

		// T·∫°o h·ªì s∆° ng∆∞·ªùi giao h√†ng
		var delivererID int64
		err := db.QueryRow(ctx, `
			INSERT INTO delivery_persons (
				user_id, id_card_number, vehicle_type, vehicle_license_plate, status, average_rating
			)
			VALUES ($1, $2, $3, $4, $5, $6)
			ON CONFLICT DO NOTHING
			RETURNING id;
		`, userID, idCard, vehicleType, licensePlate, "active", gofakeit.Float32Range(4.0, 5.0)).Scan(&delivererID)

		if err != nil {
			if err == pgx.ErrNoRows {
				// C√≥ th·ªÉ do conflict, th·ª≠ l·∫•y ID t·ª´ b·∫£ng
				err = db.QueryRow(ctx, `
					SELECT id FROM delivery_persons WHERE user_id = $1
				`, userID).Scan(&delivererID)

				if err != nil {
					log.Printf("Error getting deliverer ID: %v", err)
					continue
				}
			} else {
				log.Printf("Error inserting delivery person: %v", err)
				continue
			}
		}

		// Th√™m c√°c khu v·ª±c ph·ª•c v·ª• (2-5 khu v·ª±c)
		numAreas := gofakeit.Number(2, 5)

		// L·∫•y danh s√°ch areas t·ª´ c∆° s·ªü d·ªØ li·ªáu
		var areaIDs []int64
		rows, err := db.Query(ctx, `SELECT id FROM areas LIMIT 100`)
		if err != nil {
			log.Printf("Error getting areas: %v", err)
		} else {
			defer rows.Close()
			for rows.Next() {
				var areaID int64
				if err := rows.Scan(&areaID); err != nil {
					log.Printf("Error scanning area ID: %v", err)
					continue
				}
				areaIDs = append(areaIDs, areaID)
			}
		}

		if len(areaIDs) == 0 {
			log.Printf("No areas found for deliverer: %d", delivererID)
			continue
		}

		// Shuffle areaIDs
		gofakeit.ShuffleAnySlice(areaIDs)

		// L·∫•y numAreas khu v·ª±c ho·∫∑c t·∫•t c·∫£ n·∫øu kh√¥ng ƒë·ªß
		if numAreas > len(areaIDs) {
			numAreas = len(areaIDs)
		}

		// Th√™m khu v·ª±c ph·ª•c v·ª•
		for i := 0; i < numAreas; i++ {
			_, err := db.Exec(ctx, `
				INSERT INTO delivery_service_areas (delivery_person_id, area_id, is_active)
				VALUES ($1, $2, $3)
				ON CONFLICT DO NOTHING;
			`, delivererID, areaIDs[i], true)

			if err != nil {
				log.Printf("Error inserting delivery service area: %v", err)
			}
		}

		// C≈©ng t·∫°o m·ªôt ƒë∆°n ƒëƒÉng k√Ω
		_, err = db.Exec(ctx, `
			INSERT INTO delivery_person_applications (
				user_id, id_card_number, id_card_front_image, id_card_back_image,
				vehicle_type, vehicle_license_plate, service_area, application_status
			)
			VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
			ON CONFLICT DO NOTHING;
		`,
			userID, idCard,
			"https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=880&q=80",
			"https://images.unsplash.com/photo-1560250097-0b93528c311a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1171&q=80",
			vehicleType, licensePlate,
			json.RawMessage(fmt.Sprintf(`[{"area_id": %d}]`, areaIDs[0])),
			"approved")

		if err != nil {
			log.Printf("Error inserting delivery person application: %v", err)
		}
	}

	log.Printf("‚úÖ Created %d deliverer profiles", len(delivererUserIDs))
}

// C√°c function m·ªõi cho ph·∫ßn seed m·ªü r·ªông
func seedProductReviews(ctx context.Context, db *pgxpool.Pool, userIDs []int64) {
	// L·∫•y danh s√°ch products
	var products []struct {
		id     string
		userID int64
	}

	rows, err := db.Query(ctx, `
		SELECT p.id, s.user_id 
		FROM products p
		JOIN supplier_profiles s ON p.supplier_id = s.id
		LIMIT 100
	`)

	if err != nil {
		log.Printf("Error getting products: %v", err)
		return
	}

	defer rows.Close()
	for rows.Next() {
		var product struct {
			id     string
			userID int64
		}

		if err := rows.Scan(&product.id, &product.userID); err != nil {
			log.Printf("Error scanning product: %v", err)
			continue
		}

		products = append(products, product)
	}

	if len(products) == 0 {
		log.Printf("No products found for reviews")
		return
	}

	// Shuffle user IDs
	gofakeit.ShuffleAnySlice(userIDs)

	// T·∫°o reviews cho m·ªói s·∫£n ph·∫©m
	reviewCount := 0

	for _, product := range products {
		// S·ªë l∆∞·ª£ng review cho m·ªói s·∫£n ph·∫©m (3-10)
		numReviews := gofakeit.Number(3, 10)

		for i := 0; i < numReviews; i++ {
			// L·∫•y user ID ng·∫´u nhi√™n, nh∆∞ng kh√¥ng ph·∫£i supplier c·ªßa s·∫£n ph·∫©m
			userIndex := (i*7 + reviewCount) % len(userIDs)
			userID := userIDs[userIndex]

			if userID == product.userID {
				continue // Skip if user is the supplier
			}

			// Rating t·ª´ 3-5 sao (h·∫ßu h·∫øt ƒë·ªÅu l√† t·ªët)
			rating := gofakeit.Number(3, 5)

			// Comment cho review
			reviews := []string{
				"S·∫£n ph·∫©m r·∫•t t·ªët, ƒë√∫ng nh∆∞ m√¥ t·∫£.",
				"Giao h√†ng nhanh, ƒë√≥ng g√≥i c·∫©n th·∫≠n.",
				"Ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m tuy·ªát v·ªùi, s·∫Ω ·ªßng h·ªô shop l·∫ßn sau.",
				"H√†ng ƒë·∫πp, ch·∫•t l∆∞·ª£ng ·ªïn, gi√° c·∫£ h·ª£p l√Ω.",
				"R·∫•t h√†i l√≤ng v·ªõi s·∫£n ph·∫©m n√†y.",
				"D·ªãch v·ª• chƒÉm s√≥c kh√°ch h√†ng t·ªët, s·∫£n ph·∫©m ƒë√∫ng nh∆∞ h√¨nh.",
				"ƒê√≥ng g√≥i c·∫©n th·∫≠n, s·∫£n ph·∫©m kh√¥ng b·ªã h∆∞ h·ªèng.",
				"S·∫£n ph·∫©m ƒë√∫ng nh∆∞ m√¥ t·∫£, m·∫´u m√£ ƒë·∫πp.",
				"Shop t∆∞ v·∫•n nhi·ªát t√¨nh, giao h√†ng ƒë√∫ng h·∫πn.",
				"Gi√° c·∫£ ph·∫£i chƒÉng, ch·∫•t l∆∞·ª£ng t·ªët.",
			}

			comment := reviews[gofakeit.Number(0, len(reviews)-1)]

			if rating < 5 {
				// Th√™m m·ªôt s·ªë ph√†n n√†n nh·ªè cho rating d∆∞·ªõi 5 sao
				complaints := []string{
					" Tuy nhi√™n, th·ªùi gian giao h√†ng h∆°i l√¢u.",
					" Nh∆∞ng ƒë√≥ng g√≥i c√≥ th·ªÉ c·∫©n th·∫≠n h∆°n.",
					" Ch·ªâ ti·∫øc l√† m√†u s·∫Øc kh√¥ng ƒë√∫ng nh∆∞ h√¨nh.",
					" C√≥ m·ªôt v√†i chi ti·∫øt nh·ªè ch∆∞a ho√†n thi·ªán.",
					" Nh∆∞ng gi√° h∆°i cao so v·ªõi ch·∫•t l∆∞·ª£ng.",
				}

				comment += complaints[gofakeit.Number(0, len(complaints)-1)]
			}

			// Th√™m review
			_, err := db.Exec(ctx, `
				INSERT INTO product_reviews (
					product_id, user_id, rating, comment, helpful_votes
				)
				VALUES ($1, $2, $3, $4, $5)
				ON CONFLICT DO NOTHING;
			`, product.id, userID, rating, comment, gofakeit.Number(0, 20))

			if err != nil {
				log.Printf("Error inserting product review: %v", err)
			} else {
				reviewCount++
			}
		}
	}

	log.Printf("‚úÖ Created %d product reviews", reviewCount)
}

func seedCoupons(ctx context.Context, db *pgxpool.Pool) {
	currentTime := time.Now()

	coupons := []struct {
		code, name, desc, discountType       string
		discountValue, maxDiscount, minOrder float32
		startDate, endDate                   time.Time
		usageLimit                           int
	}{
		{
			code:          "WELCOME10",
			name:          "Ch√†o m·ª´ng th√†nh vi√™n m·ªõi",
			desc:          "Gi·∫£m 10% cho ƒë∆°n h√†ng ƒë·∫ßu ti√™n",
			discountType:  "percentage",
			discountValue: 10,
			maxDiscount:   100000,
			minOrder:      0,
			startDate:     currentTime.AddDate(0, -1, 0),
			endDate:       currentTime.AddDate(0, 2, 0),
			usageLimit:    1000,
		},
		{
			code:          "SUMMER2023",
			name:          "Khuy·∫øn m√£i m√πa h√® 2023",
			desc:          "Gi·∫£m 50.000ƒë cho ƒë∆°n h√†ng t·ª´ 500.000ƒë",
			discountType:  "fixed_amount",
			discountValue: 50000,
			maxDiscount:   50000,
			minOrder:      500000,
			startDate:     currentTime.AddDate(0, 0, -15),
			endDate:       currentTime.AddDate(0, 1, 15),
			usageLimit:    500,
		},
		{
			code:          "FREESHIP",
			name:          "Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn",
			desc:          "Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n h√†ng t·ª´ 300.000ƒë",
			discountType:  "fixed_amount",
			discountValue: 30000,
			maxDiscount:   30000,
			minOrder:      300000,
			startDate:     currentTime.AddDate(0, 0, -30),
			endDate:       currentTime.AddDate(0, 3, 0),
			usageLimit:    2000,
		},
		{
			code:          "TECH15",
			name:          "Gi·∫£m gi√° thi·∫øt b·ªã c√¥ng ngh·ªá",
			desc:          "Gi·∫£m 15% cho c√°c s·∫£n ph·∫©m ƒëi·ªán t·ª≠",
			discountType:  "percentage",
			discountValue: 15,
			maxDiscount:   200000,
			minOrder:      1000000,
			startDate:     currentTime.AddDate(0, 0, -5),
			endDate:       currentTime.AddDate(0, 1, 0),
			usageLimit:    300,
		},
		{
			code:          "FLASH50",
			name:          "Flash Sale",
			desc:          "Gi·∫£m 50% cho 50 ƒë∆°n h√†ng ƒë·∫ßu ti√™n",
			discountType:  "percentage",
			discountValue: 50,
			maxDiscount:   500000,
			minOrder:      100000,
			startDate:     currentTime,
			endDate:       currentTime.AddDate(0, 0, 2),
			usageLimit:    50,
		},
	}

	for _, coupon := range coupons {
		_, err := db.Exec(ctx, `
			INSERT INTO coupons (
				code, name, description, discount_type, discount_value,
				maximum_discount_amount, minimum_order_amount, currency,
				start_date, end_date, usage_limit, is_active
			)
			VALUES ($1, $2, $3, $4, $5, $6, $7, 'VND', $8, $9, $10, TRUE)
			ON CONFLICT (code) DO UPDATE
			SET name = $2, description = $3, discount_type = $4, discount_value = $5,
				maximum_discount_amount = $6, minimum_order_amount = $7,
				start_date = $8, end_date = $9, usage_limit = $10;
		`,
			coupon.code, coupon.name, coupon.desc, coupon.discountType, coupon.discountValue,
			coupon.maxDiscount, coupon.minOrder, coupon.startDate, coupon.endDate,
			coupon.usageLimit)

		if err != nil {
			log.Printf("Error inserting coupon: %v", err)
		}
	}

	log.Printf("‚úÖ Created %d coupons", len(coupons))
}

func seedCartItems(ctx context.Context, db *pgxpool.Pool, userIDs []int64) {
	// L·∫•y danh s√°ch carts
	carts := make(map[int64]int64) // user_id -> cart_id
	rows, err := db.Query(ctx, `SELECT user_id, id FROM carts LIMIT 1000`)
	if err != nil {
		log.Printf("Error getting carts: %v", err)
		return
	}

	defer rows.Close()
	for rows.Next() {
		var userID, cartID int64
		if err := rows.Scan(&userID, &cartID); err != nil {
			log.Printf("Error scanning cart: %v", err)
			continue
		}
		carts[userID] = cartID
	}

	// L·∫•y danh s√°ch product_variants
	type productVariant struct {
		id        string
		productID string
	}

	var variants []productVariant
	variantRows, err := db.Query(ctx, `
		SELECT id, product_id FROM product_variants
		WHERE is_active = TRUE AND inventory_quantity > 0
		LIMIT 500
	`)

	if err != nil {
		log.Printf("Error getting product variants: %v", err)
		return
	}

	defer variantRows.Close()
	for variantRows.Next() {
		var variant productVariant
		if err := variantRows.Scan(&variant.id, &variant.productID); err != nil {
			log.Printf("Error scanning product variant: %v", err)
			continue
		}
		variants = append(variants, variant)
	}

	if len(variants) == 0 {
		log.Printf("No product variants found for cart items")
		return
	}

	// Th√™m cart items cho kho·∫£ng 30% users
	numUsers := len(userIDs) * 3 / 10
	if numUsers > len(userIDs) {
		numUsers = len(userIDs)
	}

	// Shuffle user IDs
	gofakeit.ShuffleAnySlice(userIDs)
	selectedUsers := userIDs[:numUsers]

	// T·ªïng s·ªë cart items ƒë√£ t·∫°o
	totalCartItems := 0

	for _, userID := range selectedUsers {
		cartID, ok := carts[userID]
		if !ok {
			continue
		}

		// S·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng (1-5)
		numItems := gofakeit.Number(1, 5)

		// Shuffle variants
		gofakeit.ShuffleAnySlice(variants)

		// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
		for i := 0; i < numItems && i < len(variants); i++ {
			variant := variants[i]
			quantity := gofakeit.Number(1, 3)

			_, err := db.Exec(ctx, `
				INSERT INTO cart_items (cart_id, product_id, product_variant_id, quantity)
				VALUES ($1, $2, $3, $4)
				ON CONFLICT DO NOTHING;
			`, cartID, variant.productID, variant.id, quantity)

			if err != nil {
				log.Printf("Error inserting cart item: %v", err)
			} else {
				totalCartItems++
			}
		}
	}

	log.Printf("‚úÖ Created %d cart items for %d users", totalCartItems, len(selectedUsers))
}

func seedOrders(ctx context.Context, db *pgxpool.Pool, userIDs []int64) {
	// L·∫•y danh s√°ch product_variants
	type productVariant struct {
		id            string
		productID     string
		sku           string
		name          string
		price         float32
		discountPrice float32
		imageURL      string
	}

	var variants []productVariant
	variantRows, err := db.Query(ctx, `
		SELECT pv.id, pv.product_id, pv.sku, pv.variant_name, 
			pv.price, COALESCE(pv.discount_price, pv.price), pv.image_url
		FROM product_variants pv
		WHERE pv.is_active = TRUE
		LIMIT 500
	`)

	if err != nil {
		log.Printf("Error getting product variants: %v", err)
		return
	}

	defer variantRows.Close()
	for variantRows.Next() {
		var variant productVariant
		if err := variantRows.Scan(
			&variant.id, &variant.productID, &variant.sku, &variant.name,
			&variant.price, &variant.discountPrice, &variant.imageURL,
		); err != nil {
			log.Printf("Error scanning product variant: %v", err)
			continue
		}
		variants = append(variants, variant)
	}

	if len(variants) == 0 {
		log.Printf("No product variants found for orders")
		return
	}

	// L·∫•y danh s√°ch products ƒë·ªÉ l·∫•y t√™n s·∫£n ph·∫©m
	productNames := make(map[string]string) // product_id -> name
	productRows, err := db.Query(ctx, `SELECT id, name FROM products`)
	if err != nil {
		log.Printf("Error getting products: %v", err)
	} else {
		defer productRows.Close()
		for productRows.Next() {
			var id, name string
			if err := productRows.Scan(&id, &name); err != nil {
				log.Printf("Error scanning product: %v", err)
				continue
			}
			productNames[id] = name
		}
	}

	// L·∫•y danh s√°ch ƒë·ªãa ch·ªâ c·ªßa users
	type userAddress struct {
		userID        int64
		recipientName string
		phone         string
		street        string
		district      string
		province      string
		country       string
		postalCode    string
	}

	userAddresses := make(map[int64]userAddress)
	addrRows, err := db.Query(ctx, `
		SELECT user_id, recipient_name, phone, street, district, province, country, postal_code
		FROM addresses
		WHERE is_default = TRUE
	`)

	if err != nil {
		log.Printf("Error getting addresses: %v", err)
	} else {
		defer addrRows.Close()
		for addrRows.Next() {
			var addr userAddress
			if err := addrRows.Scan(
				&addr.userID, &addr.recipientName, &addr.phone, &addr.street,
				&addr.district, &addr.province, &addr.country, &addr.postalCode,
			); err != nil {
				log.Printf("Error scanning address: %v", err)
				continue
			}
			userAddresses[addr.userID] = addr
		}
	}

	// L·∫•y c√°c ph∆∞∆°ng th·ª©c thanh to√°n
	paymentMethods := make(map[string]int) // code -> id
	pmRows, err := db.Query(ctx, `SELECT id, code FROM payment_methods WHERE is_active = TRUE`)
	if err != nil {
		log.Printf("Error getting payment methods: %v", err)
	} else {
		defer pmRows.Close()
		for pmRows.Next() {
			var id int
			var code string
			if err := pmRows.Scan(&id, &code); err != nil {
				log.Printf("Error scanning payment method: %v", err)
				continue
			}
			paymentMethods[code] = id
		}
	}

	// L·∫•y danh s√°ch deliverer
	var delivererIDs []int64
	delivererRows, err := db.Query(ctx, `
		SELECT id FROM delivery_persons 
		WHERE status = 'active'
		LIMIT 100
	`)

	if err != nil {
		log.Printf("Error getting deliverers: %v", err)
	} else {
		defer delivererRows.Close()
		for delivererRows.Next() {
			var id int64
			if err := delivererRows.Scan(&id); err != nil {
				log.Printf("Error scanning deliverer: %v", err)
				continue
			}
			delivererIDs = append(delivererIDs, id)
		}
	}

	// C√°c tr·∫°ng th√°i ƒë∆°n h√†ng
	orderStatuses := []string{
		"pending", "confirmed", "processing", "shipped", "delivered", "cancelled",
	}

	// C√°c l√Ω do h·ªßy ƒë∆°n
	cancelReasons := []string{
		"Kh√°ch h√†ng thay ƒë·ªïi √Ω ƒë·ªãnh",
		"Kh√°ch h√†ng kh√¥ng li√™n l·∫°c ƒë∆∞·ª£c",
		"Kh√¥ng ƒë·ªß h√†ng",
		"S·∫£n ph·∫©m b·ªã l·ªói",
		"Kh√°ch h√†ng ƒë·∫∑t nh·∫ßm s·∫£n ph·∫©m",
	}

	// C√°c ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn
	shippingMethods := []string{
		"Standard", "Express", "Same Day",
	}

	// T·∫°o orders cho kho·∫£ng 50% users
	numUsers := len(userIDs) * 5 / 10
	if numUsers > len(userIDs) {
		numUsers = len(userIDs)
	}

	// Shuffle user IDs
	gofakeit.ShuffleAnySlice(userIDs)
	selectedUsers := userIDs[:numUsers]

	// T·ªïng s·ªë ƒë∆°n h√†ng ƒë√£ t·∫°o
	totalOrders := 0

	for _, userID := range selectedUsers {
		// Ki·ªÉm tra xem c√≥ ƒë·ªãa ch·ªâ kh√¥ng
		address, ok := userAddresses[userID]
		if !ok {
			continue
		}

		// M·ªói user t·∫°o 1-3 ƒë∆°n h√†ng
		numOrders := gofakeit.Number(1, 3)

		for i := 0; i < numOrders; i++ {
			// T·∫°o tracking number
			trackingNumber := fmt.Sprintf("TRK%s%d",
				strings.ToUpper(uuid.New().String()[:8]),
				time.Now().Unix())

			// Ch·ªçn ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn
			shippingMethod := shippingMethods[gofakeit.Number(0, len(shippingMethods)-1)]

			// T·∫°o t·ª´ 1-5 s·∫£n ph·∫©m cho m·ªói ƒë∆°n h√†ng
			numItems := gofakeit.Number(1, 5)

			// Shuffle variants
			gofakeit.ShuffleAnySlice(variants)
			selectedVariants := variants[:numItems]

			// T√≠nh to√°n t·ªïng ti·ªÅn
			var subTotal float32 = 0
			for _, variant := range selectedVariants {
				quantity := gofakeit.Number(1, 3)
				subTotal += variant.discountPrice * float32(quantity)
			}

			// Thu·∫ø v√† ph√≠ v·∫≠n chuy·ªÉn
			taxAmount := subTotal * 0.1
			shippingFee := float32(30000)
			if subTotal > 500000 {
				shippingFee = 0 // Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n h√†ng l·ªõn
			}

			// T·ªïng c·ªông
			totalAmount := subTotal + taxAmount + shippingFee

			// T·∫°o ƒë∆°n h√†ng
			var orderID string
			err := db.QueryRow(ctx, `
				INSERT INTO orders (
					user_id, tracking_number, shipping_address, country, city, district, ward,
					shipping_method, sub_total, tax_amount, total_amount, recipient_name, recipient_phone
				)
				VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
				RETURNING id;
			`,
				userID, trackingNumber, address.street, address.country, address.province,
				address.district, "", shippingMethod, subTotal, taxAmount, totalAmount,
				address.recipientName, address.phone,
			).Scan(&orderID)

			if err != nil {
				log.Printf("Error inserting order: %v", err)
				continue
			}

			// T·∫°o c√°c order items
			for _, variant := range selectedVariants {
				quantity := gofakeit.Number(1, 3)
				unitPrice := variant.discountPrice

				// L·∫•y t√™n s·∫£n ph·∫©m
				productName, ok := productNames[variant.productID]
				if !ok {
					productName = "S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh"
				}

				// Tr·∫°ng th√°i ƒë∆°n h√†ng
				status := orderStatuses[gofakeit.Number(0, len(orderStatuses)-1)]

				// Ghi ch√∫ h·ªßy ƒë∆°n n·∫øu l√† cancelled
				var cancelledReason interface{} = nil
				if status == "cancelled" {
					cancelledReason = cancelReasons[gofakeit.Number(0, len(cancelReasons)-1)]
				}

				// ∆Ø·ªõc t√≠nh ng√†y giao h√†ng
				estimatedDelivery := time.Now().AddDate(0, 0, gofakeit.Number(3, 7))

				// Ng√†y giao h√†ng th·ª±c t·∫ø (n·∫øu ƒë√£ giao)
				var actualDelivery interface{} = nil
				if status == "delivered" {
					actualDelivery = time.Now().AddDate(0, 0, gofakeit.Number(1, 5))
				}

				// T·∫°o order item
				var orderItemID string
				err := db.QueryRow(ctx, `
					INSERT INTO order_items (
						order_id, product_name, product_sku, product_variant_image_url,
						product_variant_name, quantity, unit_price, total_price,
						estimated_delivery_date, actual_delivery_date, cancelled_reason,
						status, shipping_fee
					)
					VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
					RETURNING id;
				`,
					orderID, productName, variant.sku, variant.imageURL,
					variant.name, quantity, unitPrice, unitPrice*float32(quantity),
					estimatedDelivery, actualDelivery, cancelledReason,
					status, shippingFee/float32(len(selectedVariants)),
				).Scan(&orderItemID)

				if err != nil {
					log.Printf("Error inserting order item: %v", err)
					continue
				}

				// Ghi l·ªãch s·ª≠ tr·∫°ng th√°i ƒë∆°n h√†ng
				_, err = db.Exec(ctx, `
					INSERT INTO order_items_history (order_item_id, status, notes, created_by)
					VALUES ($1, $2, $3, $4);
				`, orderItemID, status, "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng", userID)

				if err != nil {
					log.Printf("Error inserting order item history: %v", err)
				}

				// T·∫°o ng∆∞·ªùi giao h√†ng cho ƒë∆°n h√†ng ƒë√£ shipped ho·∫∑c delivered
				if (status == "shipped" || status == "delivered") && len(delivererIDs) > 0 {
					delivererID := delivererIDs[gofakeit.Number(0, len(delivererIDs)-1)]

					deliveryStatus := "assigned"
					if status == "shipped" {
						deliveryStatus = "in_transit"
					} else if status == "delivered" {
						deliveryStatus = "delivered"
					}

					pickupTime := time.Now().AddDate(0, 0, -gofakeit.Number(1, 3))
					var deliveryTime interface{} = nil
					if status == "delivered" {
						deliveryTime = time.Now().AddDate(0, 0, -gofakeit.Number(0, 2))
					}

					// T·∫°o order_deliverer
					_, err = db.Exec(ctx, `
						INSERT INTO order_deliverers (
							order_item_id, deliverer_id, status, pickup_time, delivery_time
						)
						VALUES ($1, $2, $3, $4, $5)
						ON CONFLICT DO NOTHING;
					`, orderItemID, delivererID, deliveryStatus, pickupTime, deliveryTime)

					if err != nil {
						log.Printf("Error inserting order deliverer: %v", err)
					}
				}

				// T·∫°o payment history cho ƒë∆°n h√†ng
				if status != "cancelled" && len(paymentMethods) > 0 {
					// Ch·ªçn ng·∫´u nhi√™n ph∆∞∆°ng th·ª©c thanh to√°n
					var paymentMethodID int
					if len(paymentMethods) > 0 {
						methods := []string{"cod", "momo"}
						code := methods[gofakeit.Number(0, len(methods)-1)]
						paymentMethodID = paymentMethods[code]
					} else {
						// Fallback n·∫øu kh√¥ng c√≥ payment method
						paymentMethodID = 1
					}

					// Th√™m user_payment_method n·∫øu ch∆∞a c√≥
					var userPaymentMethodID int64
					err := db.QueryRow(ctx, `
						INSERT INTO user_payment_methods (
							user_id, payment_method_id, is_default, card_holder_name, card_number
						)
						VALUES ($1, $2, $3, $4, $5)
						ON CONFLICT (user_id, payment_method_id) 
						DO UPDATE SET is_default = $3
						RETURNING id;
					`, userID, paymentMethodID, true, address.recipientName, "XXXX-XXXX-XXXX-XXXX").Scan(&userPaymentMethodID)

					if err != nil {
						log.Printf("Error inserting user payment method: %v", err)
						continue
					}

					// T·∫°o payment history
					paymentStatus := "pending"
					if status == "delivered" {
						paymentStatus = "completed"
					} else if status == "shipped" || status == "processing" {
						paymentStatus = "processing"
					}

					var paidAt interface{} = nil
					if paymentStatus == "completed" {
						paidAt = time.Now().AddDate(0, 0, -gofakeit.Number(0, 3))
					}

					_, err = db.Exec(ctx, `
						INSERT INTO payment_history (
							order_item_id, user_payment_method_id, amount, status,
							transaction_id, payment_gateway, paid_at
						)
						VALUES ($1, $2, $3, $4, $5, $6, $7)
						ON CONFLICT DO NOTHING;
					`,
						orderItemID, userPaymentMethodID, unitPrice*float32(quantity),
						paymentStatus, uuid.New().String(), "internal", paidAt)

					if err != nil {
						log.Printf("Error inserting payment history: %v", err)
					}
				}
			}

			totalOrders++
		}
	}

	log.Printf("‚úÖ Created %d orders", totalOrders)
}

func seedNotifications(ctx context.Context, db *pgxpool.Pool, userIDs []int64) {
	// S·ªë l∆∞·ª£ng th√¥ng b√°o m·ªói ng∆∞·ªùi d√πng (tƒÉng t·ª´ 5 l√™n 15)
	numPerUser := 15

	// C√°c lo·∫°i th√¥ng b√°o
	types := []int{1, 2, 3, 4, 5} // 1: order, 2: payment, 3: product, 4: promotion, 5: system

	// Ti√™u ƒë·ªÅ v√† n·ªôi dung th√¥ng b√°o
	titles := map[int][]string{
		1: { // Order
			"ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n",
			"ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω",
			"ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c giao",
			"ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng",
			"C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng",
			"Th√¥ng b√°o v·ªÅ ƒë∆°n h√†ng c·ªßa b·∫°n",
		},
		2: { // Payment
			"Thanh to√°n th√†nh c√¥ng",
			"Thanh to√°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω",
			"Y√™u c·∫ßu thanh to√°n ƒë∆°n h√†ng",
			"H√≥a ƒë∆°n m·ªõi",
			"X√°c nh·∫≠n thanh to√°n",
		},
		3: { // Product
			"S·∫£n ph·∫©m ƒëang gi·∫£m gi√°",
			"S·∫£n ph·∫©m b·∫°n quan t√¢m ƒë√£ c√≥ h√†ng",
			"ƒê√°nh gi√° s·∫£n ph·∫©m ƒë√£ mua",
			"S·∫£n ph·∫©m m·ªõi ra m·∫Øt",
			"C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m",
		},
		4: { // Promotion
			"Khuy·∫øn m√£i m√πa h√®",
			"Flash sale cu·ªëi tu·∫ßn",
			"M√£ gi·∫£m gi√° cho th√†nh vi√™n",
			"∆Øu ƒë√£i ƒë·∫∑c bi·ªát d√†nh cho b·∫°n",
			"Qu√† t·∫∑ng sinh nh·∫≠t",
			"∆Øu ƒë√£i ƒë·ªôc quy·ªÅn",
		},
		5: { // System
			"C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n",
			"X√°c th·ª±c t√†i kho·∫£n th√†nh c√¥ng",
			"B·∫£o m·∫≠t t√†i kho·∫£n",
			"Thay ƒë·ªïi m·∫≠t kh·∫©u",
			"C·∫≠p nh·∫≠t ·ª©ng d·ª•ng",
			"Th√¥ng b√°o b·∫£o tr√¨ h·ªá th·ªëng",
		},
	}

	contents := map[int][]string{
		1: { // Order
			"ƒê∆°n h√†ng #ORDER-ID c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. Ch√∫ng t√¥i s·∫Ω s·ªõm x·ª≠ l√Ω ƒë∆°n h√†ng.",
			"ƒê∆°n h√†ng #ORDER-ID c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω. D·ª± ki·∫øn ƒë∆°n h√†ng s·∫Ω ƒë∆∞·ª£c giao trong 3-5 ng√†y t·ªõi.",
			"ƒê∆°n h√†ng #ORDER-ID c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c giao. Vui l√≤ng chu·∫©n b·ªã nh·∫≠n h√†ng.",
			"ƒê∆°n h√†ng #ORDER-ID c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm!",
			"Ch√∫ng t√¥i ƒë√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng #ORDER-ID c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra chi ti·∫øt trong t√†i kho·∫£n.",
			"C√≥ th√¥ng b√°o m·ªõi v·ªÅ ƒë∆°n h√†ng #ORDER-ID. Vui l√≤ng ki·ªÉm tra ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.",
		},
		2: { // Payment
			"Thanh to√°n ƒë∆°n h√†ng #ORDER-ID c·ªßa b·∫°n ƒë√£ th√†nh c√¥ng. C·∫£m ∆°n b·∫°n!",
			"Thanh to√°n ƒë∆°n h√†ng #ORDER-ID c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω. Ch√∫ng t√¥i s·∫Ω th√¥ng b√°o cho b·∫°n khi ho√†n t·∫•t.",
			"Vui l√≤ng thanh to√°n ƒë∆°n h√†ng #ORDER-ID c·ªßa b·∫°n trong v√≤ng 24 gi·ªù ƒë·ªÉ tr√°nh b·ªã h·ªßy.",
			"H√≥a ƒë∆°n m·ªõi cho ƒë∆°n h√†ng #ORDER-ID ƒë√£ ƒë∆∞·ª£c t·∫°o. Vui l√≤ng thanh to√°n ƒë√∫ng h·∫°n.",
			"Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c thanh to√°n cho ƒë∆°n h√†ng #ORDER-ID c·ªßa b·∫°n. X√°c nh·∫≠n thanh to√°n ƒë√£ ho√†n t·∫•t.",
		},
		3: { // Product
			"S·∫£n ph·∫©m [PRODUCT-NAME] b·∫°n ƒë√£ xem g·∫ßn ƒë√¢y ƒëang ƒë∆∞·ª£c gi·∫£m gi√° 20%. Mua ngay!",
			"S·∫£n ph·∫©m [PRODUCT-NAME] b·∫°n quan t√¢m ƒë√£ c√≥ h√†ng tr·ªü l·∫°i. Nhanh tay mua ngay!",
			"B·∫°n ƒë√£ mua s·∫£n ph·∫©m [PRODUCT-NAME] g·∫ßn ƒë√¢y. Vui l√≤ng ƒë√°nh gi√° s·∫£n ph·∫©m ƒë·ªÉ nh·∫≠n voucher!",
			"S·∫£n ph·∫©m m·ªõi [PRODUCT-NAME] v·ª´a ra m·∫Øt. Kh√°m ph√° ngay h√¥m nay v·ªõi ∆∞u ƒë√£i ƒë·∫∑c bi·ªát!",
			"Th√¥ng tin v·ªÅ s·∫£n ph·∫©m [PRODUCT-NAME] b·∫°n ƒë√£ mua ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t. Ki·ªÉm tra ngay!",
		},
		4: { // Promotion
			"Khuy·∫øn m√£i m√πa h√® v·ªõi h√†ng ng√†n s·∫£n ph·∫©m gi·∫£m gi√° l√™n ƒë·∫øn 50%. Kh√°m ph√° ngay!",
			"Flash sale cu·ªëi tu·∫ßn - Gi·∫£m gi√° s·ªëc ch·ªâ trong 2 gi·ªù. B·∫Øt ƒë·∫ßu t·ª´ 20:00 t·ªëi nay.",
			"T·∫∑ng b·∫°n m√£ gi·∫£m gi√° SUMMER10 gi·∫£m 10% cho ƒë∆°n h√†ng ti·∫øp theo. H·∫°n s·ª≠ d·ª•ng 7 ng√†y.",
			"∆Øu ƒë√£i ƒë·∫∑c bi·ªát cho th√†nh vi√™n th√¢n thi·∫øt - Gi·∫£m 15% cho c√°c s·∫£n ph·∫©m th·ªùi trang.",
			"Ch√∫c m·ª´ng sinh nh·∫≠t! T·∫∑ng b·∫°n voucher gi·∫£m 100.000ƒë cho ƒë∆°n h√†ng t·ª´ 500.000ƒë.",
			"∆Øu ƒë√£i ƒë·ªôc quy·ªÅn d√†nh ri√™ng cho b·∫°n - Mua 1 t·∫∑ng 1 cho c√°c s·∫£n ph·∫©m chƒÉm s√≥c c√° nh√¢n.",
		},
		5: { // System
			"Th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.",
			"T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng c·ªßa h·ªá th·ªëng.",
			"V√¨ l√Ω do b·∫£o m·∫≠t, vui l√≤ng c·∫≠p nh·∫≠t m·∫≠t kh·∫©u c·ªßa b·∫°n ƒë·ªãnh k·ª≥.",
			"M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng. N·∫øu kh√¥ng ph·∫£i b·∫°n th·ª±c hi·ªán, vui l√≤ng li√™n h·ªá ngay v·ªõi ch√∫ng t√¥i.",
			"Phi√™n b·∫£n m·ªõi c·ªßa ·ª©ng d·ª•ng ƒë√£ c√≥ s·∫µn. C·∫≠p nh·∫≠t ngay ƒë·ªÉ tr·∫£i nghi·ªám nh·ªØng t√≠nh nƒÉng m·ªõi!",
			"H·ªá th·ªëng s·∫Ω ti·∫øn h√†nh b·∫£o tr√¨ t·ª´ 23:00 ƒë·∫øn 05:00 ng√†y mai. Mong b·∫°n th√¥ng c·∫£m cho s·ª± b·∫•t ti·ªán n√†y.",
		},
	}

	// H√¨nh ·∫£nh cho th√¥ng b√°o
	imageURLs := []string{
		"https://images.unsplash.com/photo-1555529669-e69e7aa0ba9a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80",
		"https://images.unsplash.com/photo-1556740758-90de374c12ad?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80",
		"https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1169&q=80",
		"https://images.unsplash.com/photo-1511370235399-1802cae1d32f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1955&q=80",
		"https://images.unsplash.com/photo-1633174524827-db00a6b9c7b1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1992&q=80",
	}

	// S·∫£n ph·∫©m m·∫´u cho th√¥ng b√°o s·∫£n ph·∫©m
	sampleProducts := []string{
		"iPhone 13 Pro Max", "Samsung Galaxy S22", "Laptop Dell XPS 13",
		"√Åo thun nam", "√Åo s∆° mi n·ªØ", "Qu·∫ßn jeans", "Gi√†y th·ªÉ thao",
		"N·ªìi c∆°m ƒëi·ªán", "M√°y l·ªçc kh√¥ng kh√≠", "ƒê·∫Øc Nh√¢n T√¢m", "T·∫° tay 5kg",
	}

	// ƒê·∫£m b·∫£o admin c≈©ng c√≥ th√¥ng b√°o (ID = 1)
	var adminID int64 = 1
	var adminExists bool = false

	// Ki·ªÉm tra xem admin ID c√≥ trong danh s√°ch userIDs kh√¥ng
	for _, id := range userIDs {
		if id == adminID {
			adminExists = true
			break
		}
	}

	// N·∫øu admin kh√¥ng c√≥ trong danh s√°ch, th√™m v√†o
	if !adminExists {
		userIDs = append([]int64{adminID}, userIDs...)
	}

	// T·∫°o th√¥ng b√°o cho m·ªói ng∆∞·ªùi d√πng
	totalNotifs := 0

	for _, userID := range userIDs {
		// ƒê·∫£m b·∫£o admin c√≥ √≠t nh·∫•t 15 th√¥ng b√°o
		notifCount := numPerUser
		if userID == adminID {
			notifCount = 15 // Ho·∫∑c nhi·ªÅu h∆°n n·∫øu mu·ªën admin c√≥ nhi·ªÅu th√¥ng b√°o h∆°n
		}

		for i := 0; i < notifCount; i++ {
			// Ch·ªçn lo·∫°i th√¥ng b√°o ng·∫´u nhi√™n
			typeIndex := gofakeit.Number(0, len(types)-1)
			notifType := types[typeIndex]

			// Ch·ªçn title v√† content ng·∫´u nhi√™n
			titleIndex := gofakeit.Number(0, len(titles[notifType])-1)
			contentIndex := gofakeit.Number(0, len(contents[notifType])-1)

			title := titles[notifType][titleIndex]
			content := contents[notifType][contentIndex]

			// Thay th·∫ø placeholders
			if strings.Contains(content, "ORDER-ID") {
				content = strings.Replace(content, "ORDER-ID", fmt.Sprintf("%d", gofakeit.Number(1000, 9999)), -1)
			}

			if strings.Contains(content, "PRODUCT-NAME") {
				productIndex := gofakeit.Number(0, len(sampleProducts)-1)
				content = strings.Replace(content, "PRODUCT-NAME", sampleProducts[productIndex], -1)
			}

			// Ch·ªçn h√¨nh ·∫£nh ng·∫´u nhi√™n
			imageURL := ""
			if gofakeit.Bool() {
				imageURL = imageURLs[gofakeit.Number(0, len(imageURLs)-1)]
			}

			// T·∫°o th√¥ng b√°o
			// ƒê·∫£m b·∫£o m·ªôt s·ªë th√¥ng b√°o ƒë√£ ƒë·ªçc v√† m·ªôt s·ªë ch∆∞a ƒë·ªçc
			isRead := gofakeit.Bool()

			// N·∫øu l√† th√¥ng b√°o cu·ªëi c√πng, ƒë·∫£m b·∫£o ch∆∞a ƒë·ªçc
			if i >= notifCount-5 {
				isRead = false
			}

			_, err := db.Exec(ctx, `
                INSERT INTO notifications (
                    user_id, type, title, content, is_read, image_title
                )
                VALUES ($1, $2, $3, $4, $5, $6)
                ON CONFLICT DO NOTHING;
            `,
				userID, notifType, title, content, isRead, imageURL)

			if err != nil {
				log.Printf("Error inserting notification: %v", err)
			} else {
				totalNotifs++
			}
		}
	}

	log.Printf("‚úÖ Created %d notifications", totalNotifs)
}

// Th√™m v√†o main function
func seedEverything(ctx context.Context, pools map[string]*pgxpool.Pool, userIDs []int64, supplierIDs []int64, adminDivisions []Province) {
	// G·ªçi c√°c h√†m seed b·ªï sung
	seedProductReviews(ctx, pools["partners_db"], userIDs)
	seedCoupons(ctx, pools["orders_db"])
	seedCartItems(ctx, pools["orders_db"], userIDs)
	seedOrders(ctx, pools["orders_db"], userIDs)
	seedNotifications(ctx, pools["notifications_db"], userIDs)
}
